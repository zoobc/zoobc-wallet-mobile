/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var model_transaction_pb = require('../model/transaction_pb.js');
goog.object.extend(proto, model_transaction_pb);
var model_batchReceipt_pb = require('../model/batchReceipt_pb.js');
goog.object.extend(proto, model_batchReceipt_pb);
var model_publishedReceipt_pb = require('../model/publishedReceipt_pb.js');
goog.object.extend(proto, model_publishedReceipt_pb);
var model_skippedBlocksmith_pb = require('../model/skippedBlocksmith_pb.js');
goog.object.extend(proto, model_skippedBlocksmith_pb);
goog.exportSymbol('proto.model.Block', null, global);
goog.exportSymbol('proto.model.BlockExtendedInfo', null, global);
goog.exportSymbol('proto.model.BlockIdsResponse', null, global);
goog.exportSymbol('proto.model.BlocksData', null, global);
goog.exportSymbol('proto.model.GetBlockRequest', null, global);
goog.exportSymbol('proto.model.GetBlocksRequest', null, global);
goog.exportSymbol('proto.model.GetBlocksResponse', null, global);
goog.exportSymbol('proto.model.GetNextBlockIdsRequest', null, global);
goog.exportSymbol('proto.model.GetNextBlocksRequest', null, global);
goog.exportSymbol('proto.model.SendBlockRequest', null, global);
goog.exportSymbol('proto.model.SendBlockResponse', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Block = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.Block.repeatedFields_, null);
};
goog.inherits(proto.model.Block, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.Block.displayName = 'proto.model.Block';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.BlockExtendedInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.BlockExtendedInfo.repeatedFields_, null);
};
goog.inherits(proto.model.BlockExtendedInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.BlockExtendedInfo.displayName = 'proto.model.BlockExtendedInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetBlockRequest.displayName = 'proto.model.GetBlockRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetBlocksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetBlocksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetBlocksRequest.displayName = 'proto.model.GetBlocksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetBlocksResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.GetBlocksResponse.repeatedFields_, null);
};
goog.inherits(proto.model.GetBlocksResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetBlocksResponse.displayName = 'proto.model.GetBlocksResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNextBlockIdsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetNextBlockIdsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNextBlockIdsRequest.displayName = 'proto.model.GetNextBlockIdsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.BlockIdsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.BlockIdsResponse.repeatedFields_, null);
};
goog.inherits(proto.model.BlockIdsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.BlockIdsResponse.displayName = 'proto.model.BlockIdsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNextBlocksRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.GetNextBlocksRequest.repeatedFields_, null);
};
goog.inherits(proto.model.GetNextBlocksRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNextBlocksRequest.displayName = 'proto.model.GetNextBlocksRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.BlocksData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.BlocksData.repeatedFields_, null);
};
goog.inherits(proto.model.BlocksData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.BlocksData.displayName = 'proto.model.BlocksData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SendBlockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.SendBlockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SendBlockRequest.displayName = 'proto.model.SendBlockRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SendBlockResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.SendBlockResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SendBlockResponse.displayName = 'proto.model.SendBlockResponse';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.Block.repeatedFields_ = [17,18];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Block.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Block.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Block} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Block.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    blockhash: msg.getBlockhash_asB64(),
    previousblockhash: msg.getPreviousblockhash_asB64(),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0),
    timestamp: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    blockseed: msg.getBlockseed_asB64(),
    blocksignature: msg.getBlocksignature_asB64(),
    cumulativedifficulty: jspb.Message.getFieldWithDefault(msg, 8, ""),
    smithscale: jspb.Message.getFieldWithDefault(msg, 9, "0"),
    blocksmithpublickey: msg.getBlocksmithpublickey_asB64(),
    totalamount: jspb.Message.getFieldWithDefault(msg, 11, "0"),
    totalfee: jspb.Message.getFieldWithDefault(msg, 12, "0"),
    totalcoinbase: jspb.Message.getFieldWithDefault(msg, 13, "0"),
    version: jspb.Message.getFieldWithDefault(msg, 14, 0),
    payloadlength: jspb.Message.getFieldWithDefault(msg, 15, 0),
    payloadhash: msg.getPayloadhash_asB64(),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    model_transaction_pb.Transaction.toObject, includeInstance),
    publishedreceiptsList: jspb.Message.toObjectList(msg.getPublishedreceiptsList(),
    model_publishedReceipt_pb.PublishedReceipt.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Block}
 */
proto.model.Block.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Block;
  return proto.model.Block.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Block} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Block}
 */
proto.model.Block.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockhash(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPreviousblockhash(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimestamp(value);
      break;
    case 6:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlockseed(value);
      break;
    case 7:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlocksignature(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setCumulativedifficulty(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setSmithscale(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setBlocksmithpublickey(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTotalamount(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTotalfee(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTotalcoinbase(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPayloadlength(value);
      break;
    case 16:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setPayloadhash(value);
      break;
    case 17:
      var value = new model_transaction_pb.Transaction;
      reader.readMessage(value,model_transaction_pb.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    case 18:
      var value = new model_publishedReceipt_pb.PublishedReceipt;
      reader.readMessage(value,model_publishedReceipt_pb.PublishedReceipt.deserializeBinaryFromReader);
      msg.addPublishedreceipts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Block.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Block.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Block} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Block.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getBlockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getPreviousblockhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getTimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = message.getBlockseed_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      6,
      f
    );
  }
  f = message.getBlocksignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      7,
      f
    );
  }
  f = message.getCumulativedifficulty();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getSmithscale();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      9,
      f
    );
  }
  f = message.getBlocksmithpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getTotalamount();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      11,
      f
    );
  }
  f = message.getTotalfee();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      12,
      f
    );
  }
  f = message.getTotalcoinbase();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      13,
      f
    );
  }
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      14,
      f
    );
  }
  f = message.getPayloadlength();
  if (f !== 0) {
    writer.writeUint32(
      15,
      f
    );
  }
  f = message.getPayloadhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      16,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      17,
      f,
      model_transaction_pb.Transaction.serializeBinaryToWriter
    );
  }
  f = message.getPublishedreceiptsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      18,
      f,
      model_publishedReceipt_pb.PublishedReceipt.serializeBinaryToWriter
    );
  }
};


/**
 * optional int64 ID = 1;
 * @return {string}
 */
proto.model.Block.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.Block.prototype.setId = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional bytes BlockHash = 2;
 * @return {!(string|Uint8Array)}
 */
proto.model.Block.prototype.getBlockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes BlockHash = 2;
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {string}
 */
proto.model.Block.prototype.getBlockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockhash()));
};


/**
 * optional bytes BlockHash = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockhash()`
 * @return {!Uint8Array}
 */
proto.model.Block.prototype.getBlockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Block.prototype.setBlockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional bytes PreviousBlockHash = 3;
 * @return {!(string|Uint8Array)}
 */
proto.model.Block.prototype.getPreviousblockhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes PreviousBlockHash = 3;
 * This is a type-conversion wrapper around `getPreviousblockhash()`
 * @return {string}
 */
proto.model.Block.prototype.getPreviousblockhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPreviousblockhash()));
};


/**
 * optional bytes PreviousBlockHash = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPreviousblockhash()`
 * @return {!Uint8Array}
 */
proto.model.Block.prototype.getPreviousblockhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPreviousblockhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Block.prototype.setPreviousblockhash = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional uint32 Height = 4;
 * @return {number}
 */
proto.model.Block.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.model.Block.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 Timestamp = 5;
 * @return {string}
 */
proto.model.Block.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.model.Block.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * optional bytes BlockSeed = 6;
 * @return {!(string|Uint8Array)}
 */
proto.model.Block.prototype.getBlockseed = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * optional bytes BlockSeed = 6;
 * This is a type-conversion wrapper around `getBlockseed()`
 * @return {string}
 */
proto.model.Block.prototype.getBlockseed_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlockseed()));
};


/**
 * optional bytes BlockSeed = 6;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlockseed()`
 * @return {!Uint8Array}
 */
proto.model.Block.prototype.getBlockseed_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlockseed()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Block.prototype.setBlockseed = function(value) {
  jspb.Message.setProto3BytesField(this, 6, value);
};


/**
 * optional bytes BlockSignature = 7;
 * @return {!(string|Uint8Array)}
 */
proto.model.Block.prototype.getBlocksignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * optional bytes BlockSignature = 7;
 * This is a type-conversion wrapper around `getBlocksignature()`
 * @return {string}
 */
proto.model.Block.prototype.getBlocksignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlocksignature()));
};


/**
 * optional bytes BlockSignature = 7;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlocksignature()`
 * @return {!Uint8Array}
 */
proto.model.Block.prototype.getBlocksignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlocksignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Block.prototype.setBlocksignature = function(value) {
  jspb.Message.setProto3BytesField(this, 7, value);
};


/**
 * optional string CumulativeDifficulty = 8;
 * @return {string}
 */
proto.model.Block.prototype.getCumulativedifficulty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.model.Block.prototype.setCumulativedifficulty = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional int64 SmithScale = 9;
 * @return {string}
 */
proto.model.Block.prototype.getSmithscale = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, "0"));
};


/** @param {string} value */
proto.model.Block.prototype.setSmithscale = function(value) {
  jspb.Message.setProto3StringIntField(this, 9, value);
};


/**
 * optional bytes BlocksmithPublicKey = 10;
 * @return {!(string|Uint8Array)}
 */
proto.model.Block.prototype.getBlocksmithpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes BlocksmithPublicKey = 10;
 * This is a type-conversion wrapper around `getBlocksmithpublickey()`
 * @return {string}
 */
proto.model.Block.prototype.getBlocksmithpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getBlocksmithpublickey()));
};


/**
 * optional bytes BlocksmithPublicKey = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getBlocksmithpublickey()`
 * @return {!Uint8Array}
 */
proto.model.Block.prototype.getBlocksmithpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getBlocksmithpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Block.prototype.setBlocksmithpublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional int64 TotalAmount = 11;
 * @return {string}
 */
proto.model.Block.prototype.getTotalamount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, "0"));
};


/** @param {string} value */
proto.model.Block.prototype.setTotalamount = function(value) {
  jspb.Message.setProto3StringIntField(this, 11, value);
};


/**
 * optional int64 TotalFee = 12;
 * @return {string}
 */
proto.model.Block.prototype.getTotalfee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, "0"));
};


/** @param {string} value */
proto.model.Block.prototype.setTotalfee = function(value) {
  jspb.Message.setProto3StringIntField(this, 12, value);
};


/**
 * optional int64 TotalCoinBase = 13;
 * @return {string}
 */
proto.model.Block.prototype.getTotalcoinbase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, "0"));
};


/** @param {string} value */
proto.model.Block.prototype.setTotalcoinbase = function(value) {
  jspb.Message.setProto3StringIntField(this, 13, value);
};


/**
 * optional uint32 Version = 14;
 * @return {number}
 */
proto.model.Block.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/** @param {number} value */
proto.model.Block.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional uint32 PayloadLength = 15;
 * @return {number}
 */
proto.model.Block.prototype.getPayloadlength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/** @param {number} value */
proto.model.Block.prototype.setPayloadlength = function(value) {
  jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional bytes PayloadHash = 16;
 * @return {!(string|Uint8Array)}
 */
proto.model.Block.prototype.getPayloadhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 16, ""));
};


/**
 * optional bytes PayloadHash = 16;
 * This is a type-conversion wrapper around `getPayloadhash()`
 * @return {string}
 */
proto.model.Block.prototype.getPayloadhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getPayloadhash()));
};


/**
 * optional bytes PayloadHash = 16;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getPayloadhash()`
 * @return {!Uint8Array}
 */
proto.model.Block.prototype.getPayloadhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getPayloadhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Block.prototype.setPayloadhash = function(value) {
  jspb.Message.setProto3BytesField(this, 16, value);
};


/**
 * repeated Transaction Transactions = 17;
 * @return {!Array<!proto.model.Transaction>}
 */
proto.model.Block.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.model.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_transaction_pb.Transaction, 17));
};


/** @param {!Array<!proto.model.Transaction>} value */
proto.model.Block.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 17, value);
};


/**
 * @param {!proto.model.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Transaction}
 */
proto.model.Block.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 17, opt_value, proto.model.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.Block.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};


/**
 * repeated PublishedReceipt PublishedReceipts = 18;
 * @return {!Array<!proto.model.PublishedReceipt>}
 */
proto.model.Block.prototype.getPublishedreceiptsList = function() {
  return /** @type{!Array<!proto.model.PublishedReceipt>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_publishedReceipt_pb.PublishedReceipt, 18));
};


/** @param {!Array<!proto.model.PublishedReceipt>} value */
proto.model.Block.prototype.setPublishedreceiptsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 18, value);
};


/**
 * @param {!proto.model.PublishedReceipt=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.PublishedReceipt}
 */
proto.model.Block.prototype.addPublishedreceipts = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 18, opt_value, proto.model.PublishedReceipt, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.Block.prototype.clearPublishedreceiptsList = function() {
  this.setPublishedreceiptsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.BlockExtendedInfo.repeatedFields_ = [6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.BlockExtendedInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.model.BlockExtendedInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.BlockExtendedInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.BlockExtendedInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && proto.model.Block.toObject(includeInstance, f),
    totalreceipts: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    receiptvalue: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    blocksmithaccountaddress: jspb.Message.getFieldWithDefault(msg, 4, ""),
    popchange: jspb.Message.getFieldWithDefault(msg, 5, "0"),
    skippedblocksmithsList: jspb.Message.toObjectList(msg.getSkippedblocksmithsList(),
    model_skippedBlocksmith_pb.SkippedBlocksmith.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.BlockExtendedInfo}
 */
proto.model.BlockExtendedInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.BlockExtendedInfo;
  return proto.model.BlockExtendedInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.BlockExtendedInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.BlockExtendedInfo}
 */
proto.model.BlockExtendedInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.Block;
      reader.readMessage(value,proto.model.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTotalreceipts(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setReceiptvalue(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setBlocksmithaccountaddress(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setPopchange(value);
      break;
    case 6:
      var value = new model_skippedBlocksmith_pb.SkippedBlocksmith;
      reader.readMessage(value,model_skippedBlocksmith_pb.SkippedBlocksmith.deserializeBinaryFromReader);
      msg.addSkippedblocksmiths(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.BlockExtendedInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.BlockExtendedInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.BlockExtendedInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.BlockExtendedInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.Block.serializeBinaryToWriter
    );
  }
  f = message.getTotalreceipts();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getReceiptvalue();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getBlocksmithaccountaddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPopchange();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      5,
      f
    );
  }
  f = message.getSkippedblocksmithsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      model_skippedBlocksmith_pb.SkippedBlocksmith.serializeBinaryToWriter
    );
  }
};


/**
 * optional Block Block = 1;
 * @return {?proto.model.Block}
 */
proto.model.BlockExtendedInfo.prototype.getBlock = function() {
  return /** @type{?proto.model.Block} */ (
    jspb.Message.getWrapperField(this, proto.model.Block, 1));
};


/** @param {?proto.model.Block|undefined} value */
proto.model.BlockExtendedInfo.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.BlockExtendedInfo.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.BlockExtendedInfo.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int64 TotalReceipts = 2;
 * @return {string}
 */
proto.model.BlockExtendedInfo.prototype.getTotalreceipts = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.model.BlockExtendedInfo.prototype.setTotalreceipts = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int64 ReceiptValue = 3;
 * @return {string}
 */
proto.model.BlockExtendedInfo.prototype.getReceiptvalue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.model.BlockExtendedInfo.prototype.setReceiptvalue = function(value) {
  jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional string BlocksmithAccountAddress = 4;
 * @return {string}
 */
proto.model.BlockExtendedInfo.prototype.getBlocksmithaccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.BlockExtendedInfo.prototype.setBlocksmithaccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 PopChange = 5;
 * @return {string}
 */
proto.model.BlockExtendedInfo.prototype.getPopchange = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.model.BlockExtendedInfo.prototype.setPopchange = function(value) {
  jspb.Message.setProto3StringIntField(this, 5, value);
};


/**
 * repeated SkippedBlocksmith SkippedBlocksmiths = 6;
 * @return {!Array<!proto.model.SkippedBlocksmith>}
 */
proto.model.BlockExtendedInfo.prototype.getSkippedblocksmithsList = function() {
  return /** @type{!Array<!proto.model.SkippedBlocksmith>} */ (
    jspb.Message.getRepeatedWrapperField(this, model_skippedBlocksmith_pb.SkippedBlocksmith, 6));
};


/** @param {!Array<!proto.model.SkippedBlocksmith>} value */
proto.model.BlockExtendedInfo.prototype.setSkippedblocksmithsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.model.SkippedBlocksmith=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.SkippedBlocksmith}
 */
proto.model.BlockExtendedInfo.prototype.addSkippedblocksmiths = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.model.SkippedBlocksmith, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.BlockExtendedInfo.prototype.clearSkippedblocksmithsList = function() {
  this.setSkippedblocksmithsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaintype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetBlockRequest}
 */
proto.model.GetBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetBlockRequest;
  return proto.model.GetBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetBlockRequest}
 */
proto.model.GetBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChaintype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetBlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaintype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional int32 ChainType = 1;
 * @return {number}
 */
proto.model.GetBlockRequest.prototype.getChaintype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.GetBlockRequest.prototype.setChaintype = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ID = 2;
 * @return {string}
 */
proto.model.GetBlockRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.model.GetBlockRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint32 Height = 3;
 * @return {number}
 */
proto.model.GetBlockRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.model.GetBlockRequest.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetBlocksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetBlocksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetBlocksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetBlocksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaintype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    limit: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetBlocksRequest}
 */
proto.model.GetBlocksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetBlocksRequest;
  return proto.model.GetBlocksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetBlocksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetBlocksRequest}
 */
proto.model.GetBlocksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChaintype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetBlocksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetBlocksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetBlocksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetBlocksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaintype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional int32 ChainType = 1;
 * @return {number}
 */
proto.model.GetBlocksRequest.prototype.getChaintype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.GetBlocksRequest.prototype.setChaintype = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 Limit = 2;
 * @return {number}
 */
proto.model.GetBlocksRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.GetBlocksRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 Height = 3;
 * @return {number}
 */
proto.model.GetBlocksRequest.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.model.GetBlocksRequest.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.GetBlocksResponse.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetBlocksResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetBlocksResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetBlocksResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetBlocksResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaintype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    count: jspb.Message.getFieldWithDefault(msg, 2, 0),
    height: jspb.Message.getFieldWithDefault(msg, 3, 0),
    blocksList: jspb.Message.toObjectList(msg.getBlocksList(),
    proto.model.BlockExtendedInfo.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetBlocksResponse}
 */
proto.model.GetBlocksResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetBlocksResponse;
  return proto.model.GetBlocksResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetBlocksResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetBlocksResponse}
 */
proto.model.GetBlocksResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChaintype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCount(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 4:
      var value = new proto.model.BlockExtendedInfo;
      reader.readMessage(value,proto.model.BlockExtendedInfo.deserializeBinaryFromReader);
      msg.addBlocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetBlocksResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetBlocksResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetBlocksResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetBlocksResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaintype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCount();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getBlocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.model.BlockExtendedInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 ChainType = 1;
 * @return {number}
 */
proto.model.GetBlocksResponse.prototype.getChaintype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.GetBlocksResponse.prototype.setChaintype = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 Count = 2;
 * @return {number}
 */
proto.model.GetBlocksResponse.prototype.getCount = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.GetBlocksResponse.prototype.setCount = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 Height = 3;
 * @return {number}
 */
proto.model.GetBlocksResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.model.GetBlocksResponse.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated BlockExtendedInfo Blocks = 4;
 * @return {!Array<!proto.model.BlockExtendedInfo>}
 */
proto.model.GetBlocksResponse.prototype.getBlocksList = function() {
  return /** @type{!Array<!proto.model.BlockExtendedInfo>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.BlockExtendedInfo, 4));
};


/** @param {!Array<!proto.model.BlockExtendedInfo>} value */
proto.model.GetBlocksResponse.prototype.setBlocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.model.BlockExtendedInfo=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.BlockExtendedInfo}
 */
proto.model.GetBlocksResponse.prototype.addBlocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.model.BlockExtendedInfo, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.GetBlocksResponse.prototype.clearBlocksList = function() {
  this.setBlocksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNextBlockIdsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNextBlockIdsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNextBlockIdsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNextBlockIdsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaintype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    limit: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNextBlockIdsRequest}
 */
proto.model.GetNextBlockIdsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNextBlockIdsRequest;
  return proto.model.GetNextBlockIdsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNextBlockIdsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNextBlockIdsRequest}
 */
proto.model.GetNextBlockIdsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChaintype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNextBlockIdsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNextBlockIdsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNextBlockIdsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNextBlockIdsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaintype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional int32 ChainType = 1;
 * @return {number}
 */
proto.model.GetNextBlockIdsRequest.prototype.getChaintype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.GetNextBlockIdsRequest.prototype.setChaintype = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 BlockId = 2;
 * @return {string}
 */
proto.model.GetNextBlockIdsRequest.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.model.GetNextBlockIdsRequest.prototype.setBlockid = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional uint32 Limit = 3;
 * @return {number}
 */
proto.model.GetNextBlockIdsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.model.GetNextBlockIdsRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.BlockIdsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.BlockIdsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.BlockIdsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.BlockIdsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.BlockIdsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.BlockIdsResponse}
 */
proto.model.BlockIdsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.BlockIdsResponse;
  return proto.model.BlockIdsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.BlockIdsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.BlockIdsResponse}
 */
proto.model.BlockIdsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<string>} */ (reader.readPackedInt64String());
      msg.setBlockidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.BlockIdsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.BlockIdsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.BlockIdsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.BlockIdsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writePackedInt64String(
      1,
      f
    );
  }
};


/**
 * repeated int64 BlockIds = 1;
 * @return {!Array<string>}
 */
proto.model.BlockIdsResponse.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/** @param {!Array<string>} value */
proto.model.BlockIdsResponse.prototype.setBlockidsList = function(value) {
  jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.model.BlockIdsResponse.prototype.addBlockids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.BlockIdsResponse.prototype.clearBlockidsList = function() {
  this.setBlockidsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.GetNextBlocksRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNextBlocksRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNextBlocksRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNextBlocksRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNextBlocksRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    chaintype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    blockid: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    blockidsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNextBlocksRequest}
 */
proto.model.GetNextBlocksRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNextBlocksRequest;
  return proto.model.GetNextBlocksRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNextBlocksRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNextBlocksRequest}
 */
proto.model.GetNextBlocksRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChaintype(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setBlockid(value);
      break;
    case 3:
      var value = /** @type {!Array<string>} */ (reader.readPackedInt64String());
      msg.setBlockidsList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNextBlocksRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNextBlocksRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNextBlocksRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNextBlocksRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChaintype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getBlockid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getBlockidsList();
  if (f.length > 0) {
    writer.writePackedInt64String(
      3,
      f
    );
  }
};


/**
 * optional int32 ChainType = 1;
 * @return {number}
 */
proto.model.GetNextBlocksRequest.prototype.getChaintype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.GetNextBlocksRequest.prototype.setChaintype = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 BlockId = 2;
 * @return {string}
 */
proto.model.GetNextBlocksRequest.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.model.GetNextBlocksRequest.prototype.setBlockid = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * repeated int64 BlockIds = 3;
 * @return {!Array<string>}
 */
proto.model.GetNextBlocksRequest.prototype.getBlockidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.model.GetNextBlocksRequest.prototype.setBlockidsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 */
proto.model.GetNextBlocksRequest.prototype.addBlockids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.GetNextBlocksRequest.prototype.clearBlockidsList = function() {
  this.setBlockidsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.BlocksData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.BlocksData.prototype.toObject = function(opt_includeInstance) {
  return proto.model.BlocksData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.BlocksData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.BlocksData.toObject = function(includeInstance, msg) {
  var f, obj = {
    nextblocksList: jspb.Message.toObjectList(msg.getNextblocksList(),
    proto.model.Block.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.BlocksData}
 */
proto.model.BlocksData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.BlocksData;
  return proto.model.BlocksData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.BlocksData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.BlocksData}
 */
proto.model.BlocksData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.Block;
      reader.readMessage(value,proto.model.Block.deserializeBinaryFromReader);
      msg.addNextblocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.BlocksData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.BlocksData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.BlocksData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.BlocksData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNextblocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.Block.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Block NextBlocks = 1;
 * @return {!Array<!proto.model.Block>}
 */
proto.model.BlocksData.prototype.getNextblocksList = function() {
  return /** @type{!Array<!proto.model.Block>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Block, 1));
};


/** @param {!Array<!proto.model.Block>} value */
proto.model.BlocksData.prototype.setNextblocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.Block=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Block}
 */
proto.model.BlocksData.prototype.addNextblocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.Block, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.BlocksData.prototype.clearNextblocksList = function() {
  this.setNextblocksList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SendBlockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SendBlockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SendBlockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendBlockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    block: (f = msg.getBlock()) && proto.model.Block.toObject(includeInstance, f),
    chaintype: jspb.Message.getFieldWithDefault(msg, 2, 0),
    senderpublickey: msg.getSenderpublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SendBlockRequest}
 */
proto.model.SendBlockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SendBlockRequest;
  return proto.model.SendBlockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SendBlockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SendBlockRequest}
 */
proto.model.SendBlockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.Block;
      reader.readMessage(value,proto.model.Block.deserializeBinaryFromReader);
      msg.setBlock(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setChaintype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSenderpublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SendBlockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SendBlockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SendBlockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendBlockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBlock();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.Block.serializeBinaryToWriter
    );
  }
  f = message.getChaintype();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getSenderpublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional Block Block = 1;
 * @return {?proto.model.Block}
 */
proto.model.SendBlockRequest.prototype.getBlock = function() {
  return /** @type{?proto.model.Block} */ (
    jspb.Message.getWrapperField(this, proto.model.Block, 1));
};


/** @param {?proto.model.Block|undefined} value */
proto.model.SendBlockRequest.prototype.setBlock = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.SendBlockRequest.prototype.clearBlock = function() {
  this.setBlock(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.SendBlockRequest.prototype.hasBlock = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional int32 ChainType = 2;
 * @return {number}
 */
proto.model.SendBlockRequest.prototype.getChaintype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.SendBlockRequest.prototype.setChaintype = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bytes SenderPublicKey = 3;
 * @return {!(string|Uint8Array)}
 */
proto.model.SendBlockRequest.prototype.getSenderpublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes SenderPublicKey = 3;
 * This is a type-conversion wrapper around `getSenderpublickey()`
 * @return {string}
 */
proto.model.SendBlockRequest.prototype.getSenderpublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSenderpublickey()));
};


/**
 * optional bytes SenderPublicKey = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSenderpublickey()`
 * @return {!Uint8Array}
 */
proto.model.SendBlockRequest.prototype.getSenderpublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSenderpublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.SendBlockRequest.prototype.setSenderpublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SendBlockResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SendBlockResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SendBlockResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendBlockResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    batchreceipt: (f = msg.getBatchreceipt()) && model_batchReceipt_pb.BatchReceipt.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SendBlockResponse}
 */
proto.model.SendBlockResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SendBlockResponse;
  return proto.model.SendBlockResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SendBlockResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SendBlockResponse}
 */
proto.model.SendBlockResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new model_batchReceipt_pb.BatchReceipt;
      reader.readMessage(value,model_batchReceipt_pb.BatchReceipt.deserializeBinaryFromReader);
      msg.setBatchreceipt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SendBlockResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SendBlockResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SendBlockResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendBlockResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBatchreceipt();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      model_batchReceipt_pb.BatchReceipt.serializeBinaryToWriter
    );
  }
};


/**
 * optional BatchReceipt BatchReceipt = 1;
 * @return {?proto.model.BatchReceipt}
 */
proto.model.SendBlockResponse.prototype.getBatchreceipt = function() {
  return /** @type{?proto.model.BatchReceipt} */ (
    jspb.Message.getWrapperField(this, model_batchReceipt_pb.BatchReceipt, 1));
};


/** @param {?proto.model.BatchReceipt|undefined} value */
proto.model.SendBlockResponse.prototype.setBatchreceipt = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.SendBlockResponse.prototype.clearBatchreceipt = function() {
  this.setBatchreceipt(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.SendBlockResponse.prototype.hasBatchreceipt = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.model);
