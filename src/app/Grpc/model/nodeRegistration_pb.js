/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var model_pagination_pb = require('../model/pagination_pb.js');
goog.object.extend(proto, model_pagination_pb);
goog.exportSymbol('proto.model.GetNodeRegistrationRequest', null, global);
goog.exportSymbol('proto.model.GetNodeRegistrationResponse', null, global);
goog.exportSymbol('proto.model.GetNodeRegistrationsRequest', null, global);
goog.exportSymbol('proto.model.GetNodeRegistrationsResponse', null, global);
goog.exportSymbol('proto.model.NodeAddress', null, global);
goog.exportSymbol('proto.model.NodeRegistration', null, global);
goog.exportSymbol('proto.model.NodeRegistrationState', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.NodeAddress = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.NodeAddress, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.NodeAddress.displayName = 'proto.model.NodeAddress';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.NodeRegistration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.NodeRegistration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.NodeRegistration.displayName = 'proto.model.NodeRegistration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNodeRegistrationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetNodeRegistrationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNodeRegistrationsRequest.displayName = 'proto.model.GetNodeRegistrationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNodeRegistrationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.GetNodeRegistrationsResponse.repeatedFields_, null);
};
goog.inherits(proto.model.GetNodeRegistrationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNodeRegistrationsResponse.displayName = 'proto.model.GetNodeRegistrationsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNodeRegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetNodeRegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNodeRegistrationRequest.displayName = 'proto.model.GetNodeRegistrationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNodeRegistrationResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetNodeRegistrationResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNodeRegistrationResponse.displayName = 'proto.model.GetNodeRegistrationResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.NodeAddress.prototype.toObject = function(opt_includeInstance) {
  return proto.model.NodeAddress.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.NodeAddress} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeAddress.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, ""),
    port: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.NodeAddress}
 */
proto.model.NodeAddress.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.NodeAddress;
  return proto.model.NodeAddress.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.NodeAddress} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.NodeAddress}
 */
proto.model.NodeAddress.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPort(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.NodeAddress.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.NodeAddress.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.NodeAddress} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeAddress.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPort();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string Address = 1;
 * @return {string}
 */
proto.model.NodeAddress.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.NodeAddress.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 Port = 2;
 * @return {number}
 */
proto.model.NodeAddress.prototype.getPort = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.NodeAddress.prototype.setPort = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.NodeRegistration.prototype.toObject = function(opt_includeInstance) {
  return proto.model.NodeRegistration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.NodeRegistration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeRegistration.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    nodepublickey: msg.getNodepublickey_asB64(),
    accountaddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    registrationheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nodeaddress: (f = msg.getNodeaddress()) && proto.model.NodeAddress.toObject(includeInstance, f),
    lockedbalance: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    registrationstatus: jspb.Message.getFieldWithDefault(msg, 7, 0),
    latest: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.NodeRegistration}
 */
proto.model.NodeRegistration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.NodeRegistration;
  return proto.model.NodeRegistration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.NodeRegistration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.NodeRegistration}
 */
proto.model.NodeRegistration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setNodeid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountaddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRegistrationheight(value);
      break;
    case 5:
      var value = new proto.model.NodeAddress;
      reader.readMessage(value,proto.model.NodeAddress.deserializeBinaryFromReader);
      msg.setNodeaddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLockedbalance(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRegistrationstatus(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLatest(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.NodeRegistration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.NodeRegistration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.NodeRegistration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeRegistration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRegistrationheight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getNodeaddress();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.model.NodeAddress.serializeBinaryToWriter
    );
  }
  f = message.getLockedbalance();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      6,
      f
    );
  }
  f = message.getRegistrationstatus();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getLatest();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional int64 NodeID = 1;
 * @return {string}
 */
proto.model.NodeRegistration.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.NodeRegistration.prototype.setNodeid = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional bytes NodePublicKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.model.NodeRegistration.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes NodePublicKey = 2;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.NodeRegistration.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.NodeRegistration.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.NodeRegistration.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string AccountAddress = 3;
 * @return {string}
 */
proto.model.NodeRegistration.prototype.getAccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.NodeRegistration.prototype.setAccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 RegistrationHeight = 4;
 * @return {number}
 */
proto.model.NodeRegistration.prototype.getRegistrationheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.model.NodeRegistration.prototype.setRegistrationheight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional NodeAddress NodeAddress = 5;
 * @return {?proto.model.NodeAddress}
 */
proto.model.NodeRegistration.prototype.getNodeaddress = function() {
  return /** @type{?proto.model.NodeAddress} */ (
    jspb.Message.getWrapperField(this, proto.model.NodeAddress, 5));
};


/** @param {?proto.model.NodeAddress|undefined} value */
proto.model.NodeRegistration.prototype.setNodeaddress = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.NodeRegistration.prototype.clearNodeaddress = function() {
  this.setNodeaddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.NodeRegistration.prototype.hasNodeaddress = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional int64 LockedBalance = 6;
 * @return {string}
 */
proto.model.NodeRegistration.prototype.getLockedbalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/** @param {string} value */
proto.model.NodeRegistration.prototype.setLockedbalance = function(value) {
  jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional uint32 RegistrationStatus = 7;
 * @return {number}
 */
proto.model.NodeRegistration.prototype.getRegistrationstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.model.NodeRegistration.prototype.setRegistrationstatus = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional bool Latest = 8;
 * @return {boolean}
 */
proto.model.NodeRegistration.prototype.getLatest = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.model.NodeRegistration.prototype.setLatest = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint32 Height = 9;
 * @return {number}
 */
proto.model.NodeRegistration.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.model.NodeRegistration.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNodeRegistrationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNodeRegistrationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNodeRegistrationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    registrationstatus: jspb.Message.getFieldWithDefault(msg, 1, 0),
    minregistrationheight: jspb.Message.getFieldWithDefault(msg, 2, 0),
    maxregistrationheight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pagination: (f = msg.getPagination()) && model_pagination_pb.Pagination.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNodeRegistrationsRequest}
 */
proto.model.GetNodeRegistrationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNodeRegistrationsRequest;
  return proto.model.GetNodeRegistrationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNodeRegistrationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNodeRegistrationsRequest}
 */
proto.model.GetNodeRegistrationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRegistrationstatus(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMinregistrationheight(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setMaxregistrationheight(value);
      break;
    case 4:
      var value = new model_pagination_pb.Pagination;
      reader.readMessage(value,model_pagination_pb.Pagination.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNodeRegistrationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNodeRegistrationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRegistrationstatus();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getMinregistrationheight();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getMaxregistrationheight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      model_pagination_pb.Pagination.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 RegistrationStatus = 1;
 * @return {number}
 */
proto.model.GetNodeRegistrationsRequest.prototype.getRegistrationstatus = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.GetNodeRegistrationsRequest.prototype.setRegistrationstatus = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 MinRegistrationHeight = 2;
 * @return {number}
 */
proto.model.GetNodeRegistrationsRequest.prototype.getMinregistrationheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.GetNodeRegistrationsRequest.prototype.setMinregistrationheight = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 MaxRegistrationHeight = 3;
 * @return {number}
 */
proto.model.GetNodeRegistrationsRequest.prototype.getMaxregistrationheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.model.GetNodeRegistrationsRequest.prototype.setMaxregistrationheight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional Pagination Pagination = 4;
 * @return {?proto.model.Pagination}
 */
proto.model.GetNodeRegistrationsRequest.prototype.getPagination = function() {
  return /** @type{?proto.model.Pagination} */ (
    jspb.Message.getWrapperField(this, model_pagination_pb.Pagination, 4));
};


/** @param {?proto.model.Pagination|undefined} value */
proto.model.GetNodeRegistrationsRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.GetNodeRegistrationsRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.GetNodeRegistrationsRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.GetNodeRegistrationsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNodeRegistrationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNodeRegistrationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNodeRegistrationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    noderegistrationsList: jspb.Message.toObjectList(msg.getNoderegistrationsList(),
    proto.model.NodeRegistration.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNodeRegistrationsResponse}
 */
proto.model.GetNodeRegistrationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNodeRegistrationsResponse;
  return proto.model.GetNodeRegistrationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNodeRegistrationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNodeRegistrationsResponse}
 */
proto.model.GetNodeRegistrationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTotal(value);
      break;
    case 2:
      var value = new proto.model.NodeRegistration;
      reader.readMessage(value,proto.model.NodeRegistration.deserializeBinaryFromReader);
      msg.addNoderegistrations(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNodeRegistrationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNodeRegistrationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getNoderegistrationsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.model.NodeRegistration.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 Total = 1;
 * @return {string}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getTotal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.GetNodeRegistrationsResponse.prototype.setTotal = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * repeated NodeRegistration NodeRegistrations = 2;
 * @return {!Array<!proto.model.NodeRegistration>}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getNoderegistrationsList = function() {
  return /** @type{!Array<!proto.model.NodeRegistration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.NodeRegistration, 2));
};


/** @param {!Array<!proto.model.NodeRegistration>} value */
proto.model.GetNodeRegistrationsResponse.prototype.setNoderegistrationsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.NodeRegistration=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.NodeRegistration}
 */
proto.model.GetNodeRegistrationsResponse.prototype.addNoderegistrations = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.NodeRegistration, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.GetNodeRegistrationsResponse.prototype.clearNoderegistrationsList = function() {
  this.setNoderegistrationsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNodeRegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNodeRegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNodeRegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepublickey: msg.getNodepublickey_asB64(),
    accountaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    registrationheight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nodeaddress: (f = msg.getNodeaddress()) && proto.model.NodeAddress.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNodeRegistrationRequest}
 */
proto.model.GetNodeRegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNodeRegistrationRequest;
  return proto.model.GetNodeRegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNodeRegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNodeRegistrationRequest}
 */
proto.model.GetNodeRegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountaddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRegistrationheight(value);
      break;
    case 4:
      var value = new proto.model.NodeAddress;
      reader.readMessage(value,proto.model.NodeAddress.deserializeBinaryFromReader);
      msg.setNodeaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNodeRegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNodeRegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegistrationheight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getNodeaddress();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.model.NodeAddress.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes NodePublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.GetNodeRegistrationRequest.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NodePublicKey = 1;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.GetNodeRegistrationRequest.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationRequest.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.GetNodeRegistrationRequest.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string AccountAddress = 2;
 * @return {string}
 */
proto.model.GetNodeRegistrationRequest.prototype.getAccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.GetNodeRegistrationRequest.prototype.setAccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 RegistrationHeight = 3;
 * @return {number}
 */
proto.model.GetNodeRegistrationRequest.prototype.getRegistrationheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.model.GetNodeRegistrationRequest.prototype.setRegistrationheight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional NodeAddress NodeAddress = 4;
 * @return {?proto.model.NodeAddress}
 */
proto.model.GetNodeRegistrationRequest.prototype.getNodeaddress = function() {
  return /** @type{?proto.model.NodeAddress} */ (
    jspb.Message.getWrapperField(this, proto.model.NodeAddress, 4));
};


/** @param {?proto.model.NodeAddress|undefined} value */
proto.model.GetNodeRegistrationRequest.prototype.setNodeaddress = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.GetNodeRegistrationRequest.prototype.clearNodeaddress = function() {
  this.setNodeaddress(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.GetNodeRegistrationRequest.prototype.hasNodeaddress = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNodeRegistrationResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNodeRegistrationResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNodeRegistrationResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    noderegistration: (f = msg.getNoderegistration()) && proto.model.NodeRegistration.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNodeRegistrationResponse}
 */
proto.model.GetNodeRegistrationResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNodeRegistrationResponse;
  return proto.model.GetNodeRegistrationResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNodeRegistrationResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNodeRegistrationResponse}
 */
proto.model.GetNodeRegistrationResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.NodeRegistration;
      reader.readMessage(value,proto.model.NodeRegistration.deserializeBinaryFromReader);
      msg.setNoderegistration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNodeRegistrationResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNodeRegistrationResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNoderegistration();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.NodeRegistration.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeRegistration NodeRegistration = 1;
 * @return {?proto.model.NodeRegistration}
 */
proto.model.GetNodeRegistrationResponse.prototype.getNoderegistration = function() {
  return /** @type{?proto.model.NodeRegistration} */ (
    jspb.Message.getWrapperField(this, proto.model.NodeRegistration, 1));
};


/** @param {?proto.model.NodeRegistration|undefined} value */
proto.model.GetNodeRegistrationResponse.prototype.setNoderegistration = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.GetNodeRegistrationResponse.prototype.clearNoderegistration = function() {
  this.setNoderegistration(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.GetNodeRegistrationResponse.prototype.hasNoderegistration = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * @enum {number}
 */
proto.model.NodeRegistrationState = {
  NODEREGISTERED: 0,
  NODEQUEUED: 1,
  NODEDELETED: 2
};

goog.object.extend(exports, proto.model);
