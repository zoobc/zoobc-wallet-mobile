/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.model.GetNodeRegistrationRequest', null, global);
goog.exportSymbol('proto.model.GetNodeRegistrationsRequest', null, global);
goog.exportSymbol('proto.model.GetNodeRegistrationsResponse', null, global);
goog.exportSymbol('proto.model.NodeRegistration', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.NodeRegistration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.NodeRegistration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.NodeRegistration.displayName = 'proto.model.NodeRegistration';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNodeRegistrationsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetNodeRegistrationsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNodeRegistrationsRequest.displayName = 'proto.model.GetNodeRegistrationsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNodeRegistrationRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetNodeRegistrationRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNodeRegistrationRequest.displayName = 'proto.model.GetNodeRegistrationRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNodeRegistrationsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetNodeRegistrationsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNodeRegistrationsResponse.displayName = 'proto.model.GetNodeRegistrationsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.NodeRegistration.prototype.toObject = function(opt_includeInstance) {
  return proto.model.NodeRegistration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.NodeRegistration} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeRegistration.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodeid: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    nodepublickey: msg.getNodepublickey_asB64(),
    accountaddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    registrationheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nodeaddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    lockedbalance: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    queued: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    latest: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.NodeRegistration}
 */
proto.model.NodeRegistration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.NodeRegistration;
  return proto.model.NodeRegistration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.NodeRegistration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.NodeRegistration}
 */
proto.model.NodeRegistration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setNodeid(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountaddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRegistrationheight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeaddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLockedbalance(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQueued(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLatest(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.NodeRegistration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.NodeRegistration.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.NodeRegistration} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeRegistration.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodeid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRegistrationheight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getNodeaddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLockedbalance();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      6,
      f
    );
  }
  f = message.getQueued();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLatest();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional int64 NodeID = 1;
 * @return {string}
 */
proto.model.NodeRegistration.prototype.getNodeid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.NodeRegistration.prototype.setNodeid = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * optional bytes NodePublicKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.model.NodeRegistration.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes NodePublicKey = 2;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.NodeRegistration.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.NodeRegistration.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.NodeRegistration.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string AccountAddress = 3;
 * @return {string}
 */
proto.model.NodeRegistration.prototype.getAccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.NodeRegistration.prototype.setAccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 RegistrationHeight = 4;
 * @return {number}
 */
proto.model.NodeRegistration.prototype.getRegistrationheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.model.NodeRegistration.prototype.setRegistrationheight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string NodeAddress = 5;
 * @return {string}
 */
proto.model.NodeRegistration.prototype.getNodeaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.NodeRegistration.prototype.setNodeaddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 LockedBalance = 6;
 * @return {string}
 */
proto.model.NodeRegistration.prototype.getLockedbalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/** @param {string} value */
proto.model.NodeRegistration.prototype.setLockedbalance = function(value) {
  jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional bool Queued = 7;
 * @return {boolean}
 */
proto.model.NodeRegistration.prototype.getQueued = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.model.NodeRegistration.prototype.setQueued = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool Latest = 8;
 * @return {boolean}
 */
proto.model.NodeRegistration.prototype.getLatest = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.model.NodeRegistration.prototype.setLatest = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint32 Height = 9;
 * @return {number}
 */
proto.model.NodeRegistration.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.model.NodeRegistration.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNodeRegistrationsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNodeRegistrationsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNodeRegistrationsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepublickey: msg.getNodepublickey_asB64(),
    accountaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    registrationheight: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNodeRegistrationsRequest}
 */
proto.model.GetNodeRegistrationsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNodeRegistrationsRequest;
  return proto.model.GetNodeRegistrationsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNodeRegistrationsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNodeRegistrationsRequest}
 */
proto.model.GetNodeRegistrationsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountaddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRegistrationheight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNodeRegistrationsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNodeRegistrationsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegistrationheight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional bytes NodePublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.GetNodeRegistrationsRequest.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NodePublicKey = 1;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.GetNodeRegistrationsRequest.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationsRequest.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.GetNodeRegistrationsRequest.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string AccountAddress = 2;
 * @return {string}
 */
proto.model.GetNodeRegistrationsRequest.prototype.getAccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.GetNodeRegistrationsRequest.prototype.setAccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 RegistrationHeight = 3;
 * @return {number}
 */
proto.model.GetNodeRegistrationsRequest.prototype.getRegistrationheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.model.GetNodeRegistrationsRequest.prototype.setRegistrationheight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNodeRegistrationRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNodeRegistrationRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNodeRegistrationRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepublickey: msg.getNodepublickey_asB64(),
    accountaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    registrationheight: jspb.Message.getFieldWithDefault(msg, 3, 0),
    nodeaddress: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNodeRegistrationRequest}
 */
proto.model.GetNodeRegistrationRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNodeRegistrationRequest;
  return proto.model.GetNodeRegistrationRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNodeRegistrationRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNodeRegistrationRequest}
 */
proto.model.GetNodeRegistrationRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountaddress(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRegistrationheight(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNodeRegistrationRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNodeRegistrationRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getRegistrationheight();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getNodeaddress();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional bytes NodePublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.GetNodeRegistrationRequest.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NodePublicKey = 1;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.GetNodeRegistrationRequest.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationRequest.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.GetNodeRegistrationRequest.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string AccountAddress = 2;
 * @return {string}
 */
proto.model.GetNodeRegistrationRequest.prototype.getAccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.GetNodeRegistrationRequest.prototype.setAccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 RegistrationHeight = 3;
 * @return {number}
 */
proto.model.GetNodeRegistrationRequest.prototype.getRegistrationheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.model.GetNodeRegistrationRequest.prototype.setRegistrationheight = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional string NodeAddress = 4;
 * @return {string}
 */
proto.model.GetNodeRegistrationRequest.prototype.getNodeaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.GetNodeRegistrationRequest.prototype.setNodeaddress = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNodeRegistrationsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNodeRegistrationsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNodeRegistrationsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: msg.getId_asB64(),
    nodepublickey: msg.getNodepublickey_asB64(),
    accountaddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    registrationheight: jspb.Message.getFieldWithDefault(msg, 4, 0),
    nodeaddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    lockedbalance: jspb.Message.getFieldWithDefault(msg, 6, "0"),
    queued: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    latest: jspb.Message.getBooleanFieldWithDefault(msg, 8, false),
    height: jspb.Message.getFieldWithDefault(msg, 9, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNodeRegistrationsResponse}
 */
proto.model.GetNodeRegistrationsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNodeRegistrationsResponse;
  return proto.model.GetNodeRegistrationsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNodeRegistrationsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNodeRegistrationsResponse}
 */
proto.model.GetNodeRegistrationsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountaddress(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRegistrationheight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeaddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLockedbalance(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setQueued(value);
      break;
    case 8:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setLatest(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNodeRegistrationsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNodeRegistrationsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeRegistrationsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRegistrationheight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getNodeaddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getLockedbalance();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      6,
      f
    );
  }
  f = message.getQueued();
  if (f) {
    writer.writeBool(
      7,
      f
    );
  }
  f = message.getLatest();
  if (f) {
    writer.writeBool(
      8,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      9,
      f
    );
  }
};


/**
 * optional bytes ID = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getId = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes ID = 1;
 * This is a type-conversion wrapper around `getId()`
 * @return {string}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getId_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getId()));
};


/**
 * optional bytes ID = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getId()`
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getId_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getId()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.GetNodeRegistrationsResponse.prototype.setId = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes NodePublicKey = 2;
 * @return {!(string|Uint8Array)}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes NodePublicKey = 2;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.GetNodeRegistrationsResponse.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 2, value);
};


/**
 * optional string AccountAddress = 3;
 * @return {string}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getAccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.GetNodeRegistrationsResponse.prototype.setAccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional uint32 RegistrationHeight = 4;
 * @return {number}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getRegistrationheight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.model.GetNodeRegistrationsResponse.prototype.setRegistrationheight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string NodeAddress = 5;
 * @return {string}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getNodeaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.GetNodeRegistrationsResponse.prototype.setNodeaddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int64 LockedBalance = 6;
 * @return {string}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getLockedbalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, "0"));
};


/** @param {string} value */
proto.model.GetNodeRegistrationsResponse.prototype.setLockedbalance = function(value) {
  jspb.Message.setProto3StringIntField(this, 6, value);
};


/**
 * optional bool Queued = 7;
 * @return {boolean}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getQueued = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/** @param {boolean} value */
proto.model.GetNodeRegistrationsResponse.prototype.setQueued = function(value) {
  jspb.Message.setProto3BooleanField(this, 7, value);
};


/**
 * optional bool Latest = 8;
 * @return {boolean}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getLatest = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 8, false));
};


/** @param {boolean} value */
proto.model.GetNodeRegistrationsResponse.prototype.setLatest = function(value) {
  jspb.Message.setProto3BooleanField(this, 8, value);
};


/**
 * optional uint32 Height = 9;
 * @return {number}
 */
proto.model.GetNodeRegistrationsResponse.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/** @param {number} value */
proto.model.GetNodeRegistrationsResponse.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 9, value);
};


goog.object.extend(exports, proto.model);
