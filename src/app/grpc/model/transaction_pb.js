/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var model_proofOfOwnership_pb = require('../model/proofOfOwnership_pb.js');
goog.object.extend(proto, model_proofOfOwnership_pb);
goog.exportSymbol('proto.model.ClaimNodeRegistrationTransactionBody', null, global);
goog.exportSymbol('proto.model.EmptyTransactionBody', null, global);
goog.exportSymbol('proto.model.GetTransactionRequest', null, global);
goog.exportSymbol('proto.model.GetTransactionsRequest', null, global);
goog.exportSymbol('proto.model.GetTransactionsResponse', null, global);
goog.exportSymbol('proto.model.NodeRegistrationTransactionBody', null, global);
goog.exportSymbol('proto.model.PostTransactionRequest', null, global);
goog.exportSymbol('proto.model.PostTransactionResponse', null, global);
goog.exportSymbol('proto.model.RemoveNodeRegistrationTransactionBody', null, global);
goog.exportSymbol('proto.model.SendMoneyTransactionBody', null, global);
goog.exportSymbol('proto.model.SendTransactionRequest', null, global);
goog.exportSymbol('proto.model.SetupAccountDatasetTransactionBody', null, global);
goog.exportSymbol('proto.model.Transaction', null, global);
goog.exportSymbol('proto.model.UpdateNodeRegistrationTransactionBody', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.Transaction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.model.Transaction.oneofGroups_);
};
goog.inherits(proto.model.Transaction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.Transaction.displayName = 'proto.model.Transaction';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.EmptyTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.EmptyTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.EmptyTransactionBody.displayName = 'proto.model.EmptyTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SendMoneyTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.SendMoneyTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SendMoneyTransactionBody.displayName = 'proto.model.SendMoneyTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.NodeRegistrationTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.NodeRegistrationTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.NodeRegistrationTransactionBody.displayName = 'proto.model.NodeRegistrationTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.UpdateNodeRegistrationTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.UpdateNodeRegistrationTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.UpdateNodeRegistrationTransactionBody.displayName = 'proto.model.UpdateNodeRegistrationTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SetupAccountDatasetTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.SetupAccountDatasetTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SetupAccountDatasetTransactionBody.displayName = 'proto.model.SetupAccountDatasetTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.RemoveNodeRegistrationTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.RemoveNodeRegistrationTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.RemoveNodeRegistrationTransactionBody.displayName = 'proto.model.RemoveNodeRegistrationTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.ClaimNodeRegistrationTransactionBody = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.ClaimNodeRegistrationTransactionBody, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.ClaimNodeRegistrationTransactionBody.displayName = 'proto.model.ClaimNodeRegistrationTransactionBody';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetTransactionRequest.displayName = 'proto.model.GetTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetTransactionsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetTransactionsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetTransactionsRequest.displayName = 'proto.model.GetTransactionsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetTransactionsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.GetTransactionsResponse.repeatedFields_, null);
};
goog.inherits(proto.model.GetTransactionsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetTransactionsResponse.displayName = 'proto.model.GetTransactionsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.PostTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.PostTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.PostTransactionRequest.displayName = 'proto.model.PostTransactionRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.PostTransactionResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.PostTransactionResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.PostTransactionResponse.displayName = 'proto.model.PostTransactionResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.SendTransactionRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.SendTransactionRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.SendTransactionRequest.displayName = 'proto.model.SendTransactionRequest';
}

/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.model.Transaction.oneofGroups_ = [[14,15,16,17,18,19,20]];

/**
 * @enum {number}
 */
proto.model.Transaction.TransactionbodyCase = {
  TRANSACTIONBODY_NOT_SET: 0,
  EMPTYTRANSACTIONBODY: 14,
  SENDMONEYTRANSACTIONBODY: 15,
  NODEREGISTRATIONTRANSACTIONBODY: 16,
  UPDATENODEREGISTRATIONTRANSACTIONBODY: 17,
  REMOVENODEREGISTRATIONTRANSACTIONBODY: 18,
  CLAIMNODEREGISTRATIONTRANSACTIONBODY: 19,
  SETUPACCOUNTDATASETTRANSACTIONBODY: 20
};

/**
 * @return {proto.model.Transaction.TransactionbodyCase}
 */
proto.model.Transaction.prototype.getTransactionbodyCase = function() {
  return /** @type {proto.model.Transaction.TransactionbodyCase} */(jspb.Message.computeOneofCase(this, proto.model.Transaction.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.Transaction.prototype.toObject = function(opt_includeInstance) {
  return proto.model.Transaction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.Transaction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Transaction.toObject = function(includeInstance, msg) {
  var f, obj = {
    version: jspb.Message.getFieldWithDefault(msg, 1, 0),
    id: jspb.Message.getFieldWithDefault(msg, 2, "0"),
    blockid: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    height: jspb.Message.getFieldWithDefault(msg, 4, 0),
    senderaccountaddress: jspb.Message.getFieldWithDefault(msg, 5, ""),
    recipientaccountaddress: jspb.Message.getFieldWithDefault(msg, 6, ""),
    transactiontype: jspb.Message.getFieldWithDefault(msg, 7, 0),
    fee: jspb.Message.getFieldWithDefault(msg, 8, "0"),
    timestamp: jspb.Message.getFieldWithDefault(msg, 9, "0"),
    transactionhash: msg.getTransactionhash_asB64(),
    transactionbodylength: jspb.Message.getFieldWithDefault(msg, 11, 0),
    transactionbodybytes: msg.getTransactionbodybytes_asB64(),
    transactionindex: jspb.Message.getFieldWithDefault(msg, 13, 0),
    emptytransactionbody: (f = msg.getEmptytransactionbody()) && proto.model.EmptyTransactionBody.toObject(includeInstance, f),
    sendmoneytransactionbody: (f = msg.getSendmoneytransactionbody()) && proto.model.SendMoneyTransactionBody.toObject(includeInstance, f),
    noderegistrationtransactionbody: (f = msg.getNoderegistrationtransactionbody()) && proto.model.NodeRegistrationTransactionBody.toObject(includeInstance, f),
    updatenoderegistrationtransactionbody: (f = msg.getUpdatenoderegistrationtransactionbody()) && proto.model.UpdateNodeRegistrationTransactionBody.toObject(includeInstance, f),
    removenoderegistrationtransactionbody: (f = msg.getRemovenoderegistrationtransactionbody()) && proto.model.RemoveNodeRegistrationTransactionBody.toObject(includeInstance, f),
    claimnoderegistrationtransactionbody: (f = msg.getClaimnoderegistrationtransactionbody()) && proto.model.ClaimNodeRegistrationTransactionBody.toObject(includeInstance, f),
    setupaccountdatasettransactionbody: (f = msg.getSetupaccountdatasettransactionbody()) && proto.model.SetupAccountDatasetTransactionBody.toObject(includeInstance, f),
    signature: msg.getSignature_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.Transaction}
 */
proto.model.Transaction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.Transaction;
  return proto.model.Transaction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.Transaction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.Transaction}
 */
proto.model.Transaction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setVersion(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setBlockid(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHeight(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setSenderaccountaddress(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientaccountaddress(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransactiontype(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setFee(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setTimestamp(value);
      break;
    case 10:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionhash(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransactionbodylength(value);
      break;
    case 12:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionbodybytes(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setTransactionindex(value);
      break;
    case 14:
      var value = new proto.model.EmptyTransactionBody;
      reader.readMessage(value,proto.model.EmptyTransactionBody.deserializeBinaryFromReader);
      msg.setEmptytransactionbody(value);
      break;
    case 15:
      var value = new proto.model.SendMoneyTransactionBody;
      reader.readMessage(value,proto.model.SendMoneyTransactionBody.deserializeBinaryFromReader);
      msg.setSendmoneytransactionbody(value);
      break;
    case 16:
      var value = new proto.model.NodeRegistrationTransactionBody;
      reader.readMessage(value,proto.model.NodeRegistrationTransactionBody.deserializeBinaryFromReader);
      msg.setNoderegistrationtransactionbody(value);
      break;
    case 17:
      var value = new proto.model.UpdateNodeRegistrationTransactionBody;
      reader.readMessage(value,proto.model.UpdateNodeRegistrationTransactionBody.deserializeBinaryFromReader);
      msg.setUpdatenoderegistrationtransactionbody(value);
      break;
    case 18:
      var value = new proto.model.RemoveNodeRegistrationTransactionBody;
      reader.readMessage(value,proto.model.RemoveNodeRegistrationTransactionBody.deserializeBinaryFromReader);
      msg.setRemovenoderegistrationtransactionbody(value);
      break;
    case 19:
      var value = new proto.model.ClaimNodeRegistrationTransactionBody;
      reader.readMessage(value,proto.model.ClaimNodeRegistrationTransactionBody.deserializeBinaryFromReader);
      msg.setClaimnoderegistrationtransactionbody(value);
      break;
    case 20:
      var value = new proto.model.SetupAccountDatasetTransactionBody;
      reader.readMessage(value,proto.model.SetupAccountDatasetTransactionBody.deserializeBinaryFromReader);
      msg.setSetupaccountdatasettransactionbody(value);
      break;
    case 21:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSignature(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.Transaction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.Transaction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.Transaction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.Transaction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVersion();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      2,
      f
    );
  }
  f = message.getBlockid();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getHeight();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getSenderaccountaddress();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getRecipientaccountaddress();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTransactiontype();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getFee();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      8,
      f
    );
  }
  f = message.getTimestamp();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      9,
      f
    );
  }
  f = message.getTransactionhash_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      10,
      f
    );
  }
  f = message.getTransactionbodylength();
  if (f !== 0) {
    writer.writeUint32(
      11,
      f
    );
  }
  f = message.getTransactionbodybytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      12,
      f
    );
  }
  f = message.getTransactionindex();
  if (f !== 0) {
    writer.writeUint32(
      13,
      f
    );
  }
  f = message.getEmptytransactionbody();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      proto.model.EmptyTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getSendmoneytransactionbody();
  if (f != null) {
    writer.writeMessage(
      15,
      f,
      proto.model.SendMoneyTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getNoderegistrationtransactionbody();
  if (f != null) {
    writer.writeMessage(
      16,
      f,
      proto.model.NodeRegistrationTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getUpdatenoderegistrationtransactionbody();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      proto.model.UpdateNodeRegistrationTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getRemovenoderegistrationtransactionbody();
  if (f != null) {
    writer.writeMessage(
      18,
      f,
      proto.model.RemoveNodeRegistrationTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getClaimnoderegistrationtransactionbody();
  if (f != null) {
    writer.writeMessage(
      19,
      f,
      proto.model.ClaimNodeRegistrationTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getSetupaccountdatasettransactionbody();
  if (f != null) {
    writer.writeMessage(
      20,
      f,
      proto.model.SetupAccountDatasetTransactionBody.serializeBinaryToWriter
    );
  }
  f = message.getSignature_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      21,
      f
    );
  }
};


/**
 * optional uint32 Version = 1;
 * @return {number}
 */
proto.model.Transaction.prototype.getVersion = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.Transaction.prototype.setVersion = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 ID = 2;
 * @return {string}
 */
proto.model.Transaction.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, "0"));
};


/** @param {string} value */
proto.model.Transaction.prototype.setId = function(value) {
  jspb.Message.setProto3StringIntField(this, 2, value);
};


/**
 * optional int64 BlockID = 3;
 * @return {string}
 */
proto.model.Transaction.prototype.getBlockid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.model.Transaction.prototype.setBlockid = function(value) {
  jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional uint32 Height = 4;
 * @return {number}
 */
proto.model.Transaction.prototype.getHeight = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.model.Transaction.prototype.setHeight = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional string SenderAccountAddress = 5;
 * @return {string}
 */
proto.model.Transaction.prototype.getSenderaccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.Transaction.prototype.setSenderaccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string RecipientAccountAddress = 6;
 * @return {string}
 */
proto.model.Transaction.prototype.getRecipientaccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.model.Transaction.prototype.setRecipientaccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional uint32 TransactionType = 7;
 * @return {number}
 */
proto.model.Transaction.prototype.getTransactiontype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.model.Transaction.prototype.setTransactiontype = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 Fee = 8;
 * @return {string}
 */
proto.model.Transaction.prototype.getFee = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, "0"));
};


/** @param {string} value */
proto.model.Transaction.prototype.setFee = function(value) {
  jspb.Message.setProto3StringIntField(this, 8, value);
};


/**
 * optional int64 Timestamp = 9;
 * @return {string}
 */
proto.model.Transaction.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, "0"));
};


/** @param {string} value */
proto.model.Transaction.prototype.setTimestamp = function(value) {
  jspb.Message.setProto3StringIntField(this, 9, value);
};


/**
 * optional bytes TransactionHash = 10;
 * @return {!(string|Uint8Array)}
 */
proto.model.Transaction.prototype.getTransactionhash = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * optional bytes TransactionHash = 10;
 * This is a type-conversion wrapper around `getTransactionhash()`
 * @return {string}
 */
proto.model.Transaction.prototype.getTransactionhash_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionhash()));
};


/**
 * optional bytes TransactionHash = 10;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionhash()`
 * @return {!Uint8Array}
 */
proto.model.Transaction.prototype.getTransactionhash_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionhash()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Transaction.prototype.setTransactionhash = function(value) {
  jspb.Message.setProto3BytesField(this, 10, value);
};


/**
 * optional uint32 TransactionBodyLength = 11;
 * @return {number}
 */
proto.model.Transaction.prototype.getTransactionbodylength = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/** @param {number} value */
proto.model.Transaction.prototype.setTransactionbodylength = function(value) {
  jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional bytes TransactionBodyBytes = 12;
 * @return {!(string|Uint8Array)}
 */
proto.model.Transaction.prototype.getTransactionbodybytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * optional bytes TransactionBodyBytes = 12;
 * This is a type-conversion wrapper around `getTransactionbodybytes()`
 * @return {string}
 */
proto.model.Transaction.prototype.getTransactionbodybytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionbodybytes()));
};


/**
 * optional bytes TransactionBodyBytes = 12;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionbodybytes()`
 * @return {!Uint8Array}
 */
proto.model.Transaction.prototype.getTransactionbodybytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionbodybytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Transaction.prototype.setTransactionbodybytes = function(value) {
  jspb.Message.setProto3BytesField(this, 12, value);
};


/**
 * optional uint32 TransactionIndex = 13;
 * @return {number}
 */
proto.model.Transaction.prototype.getTransactionindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 13, 0));
};


/** @param {number} value */
proto.model.Transaction.prototype.setTransactionindex = function(value) {
  jspb.Message.setProto3IntField(this, 13, value);
};


/**
 * optional EmptyTransactionBody emptyTransactionBody = 14;
 * @return {?proto.model.EmptyTransactionBody}
 */
proto.model.Transaction.prototype.getEmptytransactionbody = function() {
  return /** @type{?proto.model.EmptyTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.EmptyTransactionBody, 14));
};


/** @param {?proto.model.EmptyTransactionBody|undefined} value */
proto.model.Transaction.prototype.setEmptytransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 14, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearEmptytransactionbody = function() {
  this.setEmptytransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasEmptytransactionbody = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional SendMoneyTransactionBody sendMoneyTransactionBody = 15;
 * @return {?proto.model.SendMoneyTransactionBody}
 */
proto.model.Transaction.prototype.getSendmoneytransactionbody = function() {
  return /** @type{?proto.model.SendMoneyTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.SendMoneyTransactionBody, 15));
};


/** @param {?proto.model.SendMoneyTransactionBody|undefined} value */
proto.model.Transaction.prototype.setSendmoneytransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 15, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearSendmoneytransactionbody = function() {
  this.setSendmoneytransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasSendmoneytransactionbody = function() {
  return jspb.Message.getField(this, 15) != null;
};


/**
 * optional NodeRegistrationTransactionBody nodeRegistrationTransactionBody = 16;
 * @return {?proto.model.NodeRegistrationTransactionBody}
 */
proto.model.Transaction.prototype.getNoderegistrationtransactionbody = function() {
  return /** @type{?proto.model.NodeRegistrationTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.NodeRegistrationTransactionBody, 16));
};


/** @param {?proto.model.NodeRegistrationTransactionBody|undefined} value */
proto.model.Transaction.prototype.setNoderegistrationtransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 16, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearNoderegistrationtransactionbody = function() {
  this.setNoderegistrationtransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasNoderegistrationtransactionbody = function() {
  return jspb.Message.getField(this, 16) != null;
};


/**
 * optional UpdateNodeRegistrationTransactionBody updateNodeRegistrationTransactionBody = 17;
 * @return {?proto.model.UpdateNodeRegistrationTransactionBody}
 */
proto.model.Transaction.prototype.getUpdatenoderegistrationtransactionbody = function() {
  return /** @type{?proto.model.UpdateNodeRegistrationTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.UpdateNodeRegistrationTransactionBody, 17));
};


/** @param {?proto.model.UpdateNodeRegistrationTransactionBody|undefined} value */
proto.model.Transaction.prototype.setUpdatenoderegistrationtransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 17, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearUpdatenoderegistrationtransactionbody = function() {
  this.setUpdatenoderegistrationtransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasUpdatenoderegistrationtransactionbody = function() {
  return jspb.Message.getField(this, 17) != null;
};


/**
 * optional RemoveNodeRegistrationTransactionBody removeNodeRegistrationTransactionBody = 18;
 * @return {?proto.model.RemoveNodeRegistrationTransactionBody}
 */
proto.model.Transaction.prototype.getRemovenoderegistrationtransactionbody = function() {
  return /** @type{?proto.model.RemoveNodeRegistrationTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.RemoveNodeRegistrationTransactionBody, 18));
};


/** @param {?proto.model.RemoveNodeRegistrationTransactionBody|undefined} value */
proto.model.Transaction.prototype.setRemovenoderegistrationtransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 18, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearRemovenoderegistrationtransactionbody = function() {
  this.setRemovenoderegistrationtransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasRemovenoderegistrationtransactionbody = function() {
  return jspb.Message.getField(this, 18) != null;
};


/**
 * optional ClaimNodeRegistrationTransactionBody claimNodeRegistrationTransactionBody = 19;
 * @return {?proto.model.ClaimNodeRegistrationTransactionBody}
 */
proto.model.Transaction.prototype.getClaimnoderegistrationtransactionbody = function() {
  return /** @type{?proto.model.ClaimNodeRegistrationTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.ClaimNodeRegistrationTransactionBody, 19));
};


/** @param {?proto.model.ClaimNodeRegistrationTransactionBody|undefined} value */
proto.model.Transaction.prototype.setClaimnoderegistrationtransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 19, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearClaimnoderegistrationtransactionbody = function() {
  this.setClaimnoderegistrationtransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasClaimnoderegistrationtransactionbody = function() {
  return jspb.Message.getField(this, 19) != null;
};


/**
 * optional SetupAccountDatasetTransactionBody setupAccountDatasetTransactionBody = 20;
 * @return {?proto.model.SetupAccountDatasetTransactionBody}
 */
proto.model.Transaction.prototype.getSetupaccountdatasettransactionbody = function() {
  return /** @type{?proto.model.SetupAccountDatasetTransactionBody} */ (
    jspb.Message.getWrapperField(this, proto.model.SetupAccountDatasetTransactionBody, 20));
};


/** @param {?proto.model.SetupAccountDatasetTransactionBody|undefined} value */
proto.model.Transaction.prototype.setSetupaccountdatasettransactionbody = function(value) {
  jspb.Message.setOneofWrapperField(this, 20, proto.model.Transaction.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.Transaction.prototype.clearSetupaccountdatasettransactionbody = function() {
  this.setSetupaccountdatasettransactionbody(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.Transaction.prototype.hasSetupaccountdatasettransactionbody = function() {
  return jspb.Message.getField(this, 20) != null;
};


/**
 * optional bytes Signature = 21;
 * @return {!(string|Uint8Array)}
 */
proto.model.Transaction.prototype.getSignature = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 21, ""));
};


/**
 * optional bytes Signature = 21;
 * This is a type-conversion wrapper around `getSignature()`
 * @return {string}
 */
proto.model.Transaction.prototype.getSignature_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSignature()));
};


/**
 * optional bytes Signature = 21;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSignature()`
 * @return {!Uint8Array}
 */
proto.model.Transaction.prototype.getSignature_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSignature()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.Transaction.prototype.setSignature = function(value) {
  jspb.Message.setProto3BytesField(this, 21, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.EmptyTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.EmptyTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.EmptyTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EmptyTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.EmptyTransactionBody}
 */
proto.model.EmptyTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.EmptyTransactionBody;
  return proto.model.EmptyTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.EmptyTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.EmptyTransactionBody}
 */
proto.model.EmptyTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.EmptyTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.EmptyTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.EmptyTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.EmptyTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SendMoneyTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SendMoneyTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SendMoneyTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendMoneyTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    amount: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SendMoneyTransactionBody}
 */
proto.model.SendMoneyTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SendMoneyTransactionBody;
  return proto.model.SendMoneyTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SendMoneyTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SendMoneyTransactionBody}
 */
proto.model.SendMoneyTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setAmount(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SendMoneyTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SendMoneyTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SendMoneyTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendMoneyTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAmount();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 Amount = 1;
 * @return {string}
 */
proto.model.SendMoneyTransactionBody.prototype.getAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.SendMoneyTransactionBody.prototype.setAmount = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.NodeRegistrationTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.NodeRegistrationTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.NodeRegistrationTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeRegistrationTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepublickey: msg.getNodepublickey_asB64(),
    accountaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    nodeaddress: jspb.Message.getFieldWithDefault(msg, 3, ""),
    lockedbalance: jspb.Message.getFieldWithDefault(msg, 4, "0"),
    poown: (f = msg.getPoown()) && model_proofOfOwnership_pb.ProofOfOwnership.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.NodeRegistrationTransactionBody}
 */
proto.model.NodeRegistrationTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.NodeRegistrationTransactionBody;
  return proto.model.NodeRegistrationTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.NodeRegistrationTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.NodeRegistrationTransactionBody}
 */
proto.model.NodeRegistrationTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountaddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeaddress(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLockedbalance(value);
      break;
    case 5:
      var value = new model_proofOfOwnership_pb.ProofOfOwnership;
      reader.readMessage(value,model_proofOfOwnership_pb.ProofOfOwnership.deserializeBinaryFromReader);
      msg.setPoown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.NodeRegistrationTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.NodeRegistrationTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.NodeRegistrationTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeRegistrationTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getNodeaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getLockedbalance();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      4,
      f
    );
  }
  f = message.getPoown();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      model_proofOfOwnership_pb.ProofOfOwnership.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes NodePublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NodePublicKey = 1;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.NodeRegistrationTransactionBody.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string AccountAddress = 2;
 * @return {string}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getAccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.NodeRegistrationTransactionBody.prototype.setAccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string NodeAddress = 3;
 * @return {string}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getNodeaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.NodeRegistrationTransactionBody.prototype.setNodeaddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 LockedBalance = 4;
 * @return {string}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getLockedbalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, "0"));
};


/** @param {string} value */
proto.model.NodeRegistrationTransactionBody.prototype.setLockedbalance = function(value) {
  jspb.Message.setProto3StringIntField(this, 4, value);
};


/**
 * optional ProofOfOwnership Poown = 5;
 * @return {?proto.model.ProofOfOwnership}
 */
proto.model.NodeRegistrationTransactionBody.prototype.getPoown = function() {
  return /** @type{?proto.model.ProofOfOwnership} */ (
    jspb.Message.getWrapperField(this, model_proofOfOwnership_pb.ProofOfOwnership, 5));
};


/** @param {?proto.model.ProofOfOwnership|undefined} value */
proto.model.NodeRegistrationTransactionBody.prototype.setPoown = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.NodeRegistrationTransactionBody.prototype.clearPoown = function() {
  this.setPoown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.NodeRegistrationTransactionBody.prototype.hasPoown = function() {
  return jspb.Message.getField(this, 5) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.UpdateNodeRegistrationTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.UpdateNodeRegistrationTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.UpdateNodeRegistrationTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepublickey: msg.getNodepublickey_asB64(),
    nodeaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lockedbalance: jspb.Message.getFieldWithDefault(msg, 3, "0"),
    poown: (f = msg.getPoown()) && model_proofOfOwnership_pb.ProofOfOwnership.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.UpdateNodeRegistrationTransactionBody}
 */
proto.model.UpdateNodeRegistrationTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.UpdateNodeRegistrationTransactionBody;
  return proto.model.UpdateNodeRegistrationTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.UpdateNodeRegistrationTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.UpdateNodeRegistrationTransactionBody}
 */
proto.model.UpdateNodeRegistrationTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNodeaddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setLockedbalance(value);
      break;
    case 4:
      var value = new model_proofOfOwnership_pb.ProofOfOwnership;
      reader.readMessage(value,model_proofOfOwnership_pb.ProofOfOwnership.deserializeBinaryFromReader);
      msg.setPoown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.UpdateNodeRegistrationTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.UpdateNodeRegistrationTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.UpdateNodeRegistrationTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getNodeaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLockedbalance();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      3,
      f
    );
  }
  f = message.getPoown();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      model_proofOfOwnership_pb.ProofOfOwnership.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes NodePublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NodePublicKey = 1;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string NodeAddress = 2;
 * @return {string}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getNodeaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.setNodeaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 LockedBalance = 3;
 * @return {string}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getLockedbalance = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, "0"));
};


/** @param {string} value */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.setLockedbalance = function(value) {
  jspb.Message.setProto3StringIntField(this, 3, value);
};


/**
 * optional ProofOfOwnership Poown = 4;
 * @return {?proto.model.ProofOfOwnership}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.getPoown = function() {
  return /** @type{?proto.model.ProofOfOwnership} */ (
    jspb.Message.getWrapperField(this, model_proofOfOwnership_pb.ProofOfOwnership, 4));
};


/** @param {?proto.model.ProofOfOwnership|undefined} value */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.setPoown = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.clearPoown = function() {
  this.setPoown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.UpdateNodeRegistrationTransactionBody.prototype.hasPoown = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SetupAccountDatasetTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SetupAccountDatasetTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SetupAccountDatasetTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    setteraccountaddress: jspb.Message.getFieldWithDefault(msg, 1, ""),
    recipientaccountaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    property: jspb.Message.getFieldWithDefault(msg, 3, ""),
    value: jspb.Message.getFieldWithDefault(msg, 4, ""),
    muchtime: jspb.Message.getFieldWithDefault(msg, 5, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SetupAccountDatasetTransactionBody}
 */
proto.model.SetupAccountDatasetTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SetupAccountDatasetTransactionBody;
  return proto.model.SetupAccountDatasetTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SetupAccountDatasetTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SetupAccountDatasetTransactionBody}
 */
proto.model.SetupAccountDatasetTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSetteraccountaddress(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecipientaccountaddress(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setProperty(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setValue(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setMuchtime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SetupAccountDatasetTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SetupAccountDatasetTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SetupAccountDatasetTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSetteraccountaddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRecipientaccountaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getProperty();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getValue();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMuchtime();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      5,
      f
    );
  }
};


/**
 * optional string SetterAccountAddress = 1;
 * @return {string}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.getSetteraccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.SetupAccountDatasetTransactionBody.prototype.setSetteraccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string RecipientAccountAddress = 2;
 * @return {string}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.getRecipientaccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.SetupAccountDatasetTransactionBody.prototype.setRecipientaccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Property = 3;
 * @return {string}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.getProperty = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.SetupAccountDatasetTransactionBody.prototype.setProperty = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string Value = 4;
 * @return {string}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.getValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.SetupAccountDatasetTransactionBody.prototype.setValue = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional uint64 MuchTime = 5;
 * @return {string}
 */
proto.model.SetupAccountDatasetTransactionBody.prototype.getMuchtime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, "0"));
};


/** @param {string} value */
proto.model.SetupAccountDatasetTransactionBody.prototype.setMuchtime = function(value) {
  jspb.Message.setProto3StringIntField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.RemoveNodeRegistrationTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.RemoveNodeRegistrationTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RemoveNodeRegistrationTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepublickey: msg.getNodepublickey_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.RemoveNodeRegistrationTransactionBody}
 */
proto.model.RemoveNodeRegistrationTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.RemoveNodeRegistrationTransactionBody;
  return proto.model.RemoveNodeRegistrationTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.RemoveNodeRegistrationTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.RemoveNodeRegistrationTransactionBody}
 */
proto.model.RemoveNodeRegistrationTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.RemoveNodeRegistrationTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.RemoveNodeRegistrationTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.RemoveNodeRegistrationTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes NodePublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NodePublicKey = 1;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.RemoveNodeRegistrationTransactionBody.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.toObject = function(opt_includeInstance) {
  return proto.model.ClaimNodeRegistrationTransactionBody.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.ClaimNodeRegistrationTransactionBody} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ClaimNodeRegistrationTransactionBody.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodepublickey: msg.getNodepublickey_asB64(),
    accountaddress: jspb.Message.getFieldWithDefault(msg, 2, ""),
    poown: (f = msg.getPoown()) && model_proofOfOwnership_pb.ProofOfOwnership.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.ClaimNodeRegistrationTransactionBody}
 */
proto.model.ClaimNodeRegistrationTransactionBody.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.ClaimNodeRegistrationTransactionBody;
  return proto.model.ClaimNodeRegistrationTransactionBody.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.ClaimNodeRegistrationTransactionBody} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.ClaimNodeRegistrationTransactionBody}
 */
proto.model.ClaimNodeRegistrationTransactionBody.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setNodepublickey(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountaddress(value);
      break;
    case 3:
      var value = new model_proofOfOwnership_pb.ProofOfOwnership;
      reader.readMessage(value,model_proofOfOwnership_pb.ProofOfOwnership.deserializeBinaryFromReader);
      msg.setPoown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.ClaimNodeRegistrationTransactionBody.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.ClaimNodeRegistrationTransactionBody} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.ClaimNodeRegistrationTransactionBody.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodepublickey_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPoown();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      model_proofOfOwnership_pb.ProofOfOwnership.serializeBinaryToWriter
    );
  }
};


/**
 * optional bytes NodePublicKey = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.getNodepublickey = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes NodePublicKey = 1;
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {string}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.getNodepublickey_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getNodepublickey()));
};


/**
 * optional bytes NodePublicKey = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getNodepublickey()`
 * @return {!Uint8Array}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.getNodepublickey_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getNodepublickey()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.setNodepublickey = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string AccountAddress = 2;
 * @return {string}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.getAccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.setAccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional ProofOfOwnership Poown = 3;
 * @return {?proto.model.ProofOfOwnership}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.getPoown = function() {
  return /** @type{?proto.model.ProofOfOwnership} */ (
    jspb.Message.getWrapperField(this, model_proofOfOwnership_pb.ProofOfOwnership, 3));
};


/** @param {?proto.model.ProofOfOwnership|undefined} value */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.setPoown = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.clearPoown = function() {
  this.setPoown(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.ClaimNodeRegistrationTransactionBody.prototype.hasPoown = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "0")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetTransactionRequest}
 */
proto.model.GetTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetTransactionRequest;
  return proto.model.GetTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetTransactionRequest}
 */
proto.model.GetTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readInt64String());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (parseInt(f, 10) !== 0) {
    writer.writeInt64String(
      1,
      f
    );
  }
};


/**
 * optional int64 ID = 1;
 * @return {string}
 */
proto.model.GetTransactionRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.GetTransactionRequest.prototype.setId = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetTransactionsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetTransactionsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetTransactionsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    limit: jspb.Message.getFieldWithDefault(msg, 1, 0),
    page: jspb.Message.getFieldWithDefault(msg, 2, 0),
    accountaddress: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetTransactionsRequest}
 */
proto.model.GetTransactionsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetTransactionsRequest;
  return proto.model.GetTransactionsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetTransactionsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetTransactionsRequest}
 */
proto.model.GetTransactionsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setLimit(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccountaddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetTransactionsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetTransactionsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetTransactionsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLimit();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getPage();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getAccountaddress();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional uint32 Limit = 1;
 * @return {number}
 */
proto.model.GetTransactionsRequest.prototype.getLimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.GetTransactionsRequest.prototype.setLimit = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 Page = 2;
 * @return {number}
 */
proto.model.GetTransactionsRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.GetTransactionsRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string AccountAddress = 3;
 * @return {string}
 */
proto.model.GetTransactionsRequest.prototype.getAccountaddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.GetTransactionsRequest.prototype.setAccountaddress = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.GetTransactionsResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetTransactionsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetTransactionsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetTransactionsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, "0"),
    transactionsList: jspb.Message.toObjectList(msg.getTransactionsList(),
    proto.model.Transaction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetTransactionsResponse}
 */
proto.model.GetTransactionsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetTransactionsResponse;
  return proto.model.GetTransactionsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetTransactionsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetTransactionsResponse}
 */
proto.model.GetTransactionsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readUint64String());
      msg.setTotal(value);
      break;
    case 2:
      var value = new proto.model.Transaction;
      reader.readMessage(value,proto.model.Transaction.deserializeBinaryFromReader);
      msg.addTransactions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetTransactionsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetTransactionsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetTransactionsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetTransactionsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (parseInt(f, 10) !== 0) {
    writer.writeUint64String(
      1,
      f
    );
  }
  f = message.getTransactionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.model.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint64 Total = 1;
 * @return {string}
 */
proto.model.GetTransactionsResponse.prototype.getTotal = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, "0"));
};


/** @param {string} value */
proto.model.GetTransactionsResponse.prototype.setTotal = function(value) {
  jspb.Message.setProto3StringIntField(this, 1, value);
};


/**
 * repeated Transaction Transactions = 2;
 * @return {!Array<!proto.model.Transaction>}
 */
proto.model.GetTransactionsResponse.prototype.getTransactionsList = function() {
  return /** @type{!Array<!proto.model.Transaction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.Transaction, 2));
};


/** @param {!Array<!proto.model.Transaction>} value */
proto.model.GetTransactionsResponse.prototype.setTransactionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.model.Transaction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.Transaction}
 */
proto.model.GetTransactionsResponse.prototype.addTransactions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.model.Transaction, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.GetTransactionsResponse.prototype.clearTransactionsList = function() {
  this.setTransactionsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.PostTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.PostTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.PostTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PostTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionbytes: msg.getTransactionbytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.PostTransactionRequest}
 */
proto.model.PostTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.PostTransactionRequest;
  return proto.model.PostTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.PostTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.PostTransactionRequest}
 */
proto.model.PostTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionbytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.PostTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.PostTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.PostTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PostTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes TransactionBytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.PostTransactionRequest.prototype.getTransactionbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes TransactionBytes = 1;
 * This is a type-conversion wrapper around `getTransactionbytes()`
 * @return {string}
 */
proto.model.PostTransactionRequest.prototype.getTransactionbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionbytes()));
};


/**
 * optional bytes TransactionBytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionbytes()`
 * @return {!Uint8Array}
 */
proto.model.PostTransactionRequest.prototype.getTransactionbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionbytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.PostTransactionRequest.prototype.setTransactionbytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.PostTransactionResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.PostTransactionResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.PostTransactionResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PostTransactionResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    transaction: (f = msg.getTransaction()) && proto.model.Transaction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.PostTransactionResponse}
 */
proto.model.PostTransactionResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.PostTransactionResponse;
  return proto.model.PostTransactionResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.PostTransactionResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.PostTransactionResponse}
 */
proto.model.PostTransactionResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.Transaction;
      reader.readMessage(value,proto.model.Transaction.deserializeBinaryFromReader);
      msg.setTransaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.PostTransactionResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.PostTransactionResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.PostTransactionResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.PostTransactionResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransaction();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.Transaction.serializeBinaryToWriter
    );
  }
};


/**
 * optional Transaction Transaction = 1;
 * @return {?proto.model.Transaction}
 */
proto.model.PostTransactionResponse.prototype.getTransaction = function() {
  return /** @type{?proto.model.Transaction} */ (
    jspb.Message.getWrapperField(this, proto.model.Transaction, 1));
};


/** @param {?proto.model.Transaction|undefined} value */
proto.model.PostTransactionResponse.prototype.setTransaction = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.PostTransactionResponse.prototype.clearTransaction = function() {
  this.setTransaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.PostTransactionResponse.prototype.hasTransaction = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.SendTransactionRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.SendTransactionRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.SendTransactionRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendTransactionRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    transactionbytes: msg.getTransactionbytes_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.SendTransactionRequest}
 */
proto.model.SendTransactionRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.SendTransactionRequest;
  return proto.model.SendTransactionRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.SendTransactionRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.SendTransactionRequest}
 */
proto.model.SendTransactionRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setTransactionbytes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.SendTransactionRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.SendTransactionRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.SendTransactionRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.SendTransactionRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTransactionbytes_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes TransactionBytes = 1;
 * @return {!(string|Uint8Array)}
 */
proto.model.SendTransactionRequest.prototype.getTransactionbytes = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes TransactionBytes = 1;
 * This is a type-conversion wrapper around `getTransactionbytes()`
 * @return {string}
 */
proto.model.SendTransactionRequest.prototype.getTransactionbytes_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getTransactionbytes()));
};


/**
 * optional bytes TransactionBytes = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getTransactionbytes()`
 * @return {!Uint8Array}
 */
proto.model.SendTransactionRequest.prototype.getTransactionbytes_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getTransactionbytes()));
};


/** @param {!(string|Uint8Array)} value */
proto.model.SendTransactionRequest.prototype.setTransactionbytes = function(value) {
  jspb.Message.setProto3BytesField(this, 1, value);
};


goog.object.extend(exports, proto.model);
