/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.model.CPUInformation', null, global);
goog.exportSymbol('proto.model.GetNodeHardwareRequest', null, global);
goog.exportSymbol('proto.model.GetNodeHardwareResponse', null, global);
goog.exportSymbol('proto.model.HostInformation', null, global);
goog.exportSymbol('proto.model.MemoryInformation', null, global);
goog.exportSymbol('proto.model.NodeHardware', null, global);
goog.exportSymbol('proto.model.StorageInformation', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNodeHardwareResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetNodeHardwareResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNodeHardwareResponse.displayName = 'proto.model.GetNodeHardwareResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.GetNodeHardwareRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.GetNodeHardwareRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.GetNodeHardwareRequest.displayName = 'proto.model.GetNodeHardwareRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.NodeHardware = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.model.NodeHardware.repeatedFields_, null);
};
goog.inherits(proto.model.NodeHardware, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.NodeHardware.displayName = 'proto.model.NodeHardware';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.CPUInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.CPUInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.CPUInformation.displayName = 'proto.model.CPUInformation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.HostInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.HostInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.HostInformation.displayName = 'proto.model.HostInformation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.MemoryInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.MemoryInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.MemoryInformation.displayName = 'proto.model.MemoryInformation';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.model.StorageInformation = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.model.StorageInformation, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.model.StorageInformation.displayName = 'proto.model.StorageInformation';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNodeHardwareResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNodeHardwareResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNodeHardwareResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeHardwareResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodehardware: (f = msg.getNodehardware()) && proto.model.NodeHardware.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNodeHardwareResponse}
 */
proto.model.GetNodeHardwareResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNodeHardwareResponse;
  return proto.model.GetNodeHardwareResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNodeHardwareResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNodeHardwareResponse}
 */
proto.model.GetNodeHardwareResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.NodeHardware;
      reader.readMessage(value,proto.model.NodeHardware.deserializeBinaryFromReader);
      msg.setNodehardware(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNodeHardwareResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNodeHardwareResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNodeHardwareResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeHardwareResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodehardware();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.model.NodeHardware.serializeBinaryToWriter
    );
  }
};


/**
 * optional NodeHardware NodeHardware = 1;
 * @return {?proto.model.NodeHardware}
 */
proto.model.GetNodeHardwareResponse.prototype.getNodehardware = function() {
  return /** @type{?proto.model.NodeHardware} */ (
    jspb.Message.getWrapperField(this, proto.model.NodeHardware, 1));
};


/** @param {?proto.model.NodeHardware|undefined} value */
proto.model.GetNodeHardwareResponse.prototype.setNodehardware = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.GetNodeHardwareResponse.prototype.clearNodehardware = function() {
  this.setNodehardware(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.GetNodeHardwareResponse.prototype.hasNodehardware = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.GetNodeHardwareRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.model.GetNodeHardwareRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.GetNodeHardwareRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeHardwareRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.GetNodeHardwareRequest}
 */
proto.model.GetNodeHardwareRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.GetNodeHardwareRequest;
  return proto.model.GetNodeHardwareRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.GetNodeHardwareRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.GetNodeHardwareRequest}
 */
proto.model.GetNodeHardwareRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.GetNodeHardwareRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.GetNodeHardwareRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.GetNodeHardwareRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.GetNodeHardwareRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.model.NodeHardware.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.NodeHardware.prototype.toObject = function(opt_includeInstance) {
  return proto.model.NodeHardware.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.NodeHardware} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeHardware.toObject = function(includeInstance, msg) {
  var f, obj = {
    cpuinformationList: jspb.Message.toObjectList(msg.getCpuinformationList(),
    proto.model.CPUInformation.toObject, includeInstance),
    memoryinformation: (f = msg.getMemoryinformation()) && proto.model.MemoryInformation.toObject(includeInstance, f),
    storageinformation: (f = msg.getStorageinformation()) && proto.model.StorageInformation.toObject(includeInstance, f),
    hostinformation: (f = msg.getHostinformation()) && proto.model.HostInformation.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.NodeHardware}
 */
proto.model.NodeHardware.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.NodeHardware;
  return proto.model.NodeHardware.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.NodeHardware} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.NodeHardware}
 */
proto.model.NodeHardware.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.model.CPUInformation;
      reader.readMessage(value,proto.model.CPUInformation.deserializeBinaryFromReader);
      msg.addCpuinformation(value);
      break;
    case 2:
      var value = new proto.model.MemoryInformation;
      reader.readMessage(value,proto.model.MemoryInformation.deserializeBinaryFromReader);
      msg.setMemoryinformation(value);
      break;
    case 3:
      var value = new proto.model.StorageInformation;
      reader.readMessage(value,proto.model.StorageInformation.deserializeBinaryFromReader);
      msg.setStorageinformation(value);
      break;
    case 4:
      var value = new proto.model.HostInformation;
      reader.readMessage(value,proto.model.HostInformation.deserializeBinaryFromReader);
      msg.setHostinformation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.NodeHardware.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.NodeHardware.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.NodeHardware} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.NodeHardware.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCpuinformationList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.model.CPUInformation.serializeBinaryToWriter
    );
  }
  f = message.getMemoryinformation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.model.MemoryInformation.serializeBinaryToWriter
    );
  }
  f = message.getStorageinformation();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.model.StorageInformation.serializeBinaryToWriter
    );
  }
  f = message.getHostinformation();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.model.HostInformation.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CPUInformation CPUInformation = 1;
 * @return {!Array<!proto.model.CPUInformation>}
 */
proto.model.NodeHardware.prototype.getCpuinformationList = function() {
  return /** @type{!Array<!proto.model.CPUInformation>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.model.CPUInformation, 1));
};


/** @param {!Array<!proto.model.CPUInformation>} value */
proto.model.NodeHardware.prototype.setCpuinformationList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.model.CPUInformation=} opt_value
 * @param {number=} opt_index
 * @return {!proto.model.CPUInformation}
 */
proto.model.NodeHardware.prototype.addCpuinformation = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.model.CPUInformation, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 */
proto.model.NodeHardware.prototype.clearCpuinformationList = function() {
  this.setCpuinformationList([]);
};


/**
 * optional MemoryInformation MemoryInformation = 2;
 * @return {?proto.model.MemoryInformation}
 */
proto.model.NodeHardware.prototype.getMemoryinformation = function() {
  return /** @type{?proto.model.MemoryInformation} */ (
    jspb.Message.getWrapperField(this, proto.model.MemoryInformation, 2));
};


/** @param {?proto.model.MemoryInformation|undefined} value */
proto.model.NodeHardware.prototype.setMemoryinformation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.NodeHardware.prototype.clearMemoryinformation = function() {
  this.setMemoryinformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.NodeHardware.prototype.hasMemoryinformation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional StorageInformation StorageInformation = 3;
 * @return {?proto.model.StorageInformation}
 */
proto.model.NodeHardware.prototype.getStorageinformation = function() {
  return /** @type{?proto.model.StorageInformation} */ (
    jspb.Message.getWrapperField(this, proto.model.StorageInformation, 3));
};


/** @param {?proto.model.StorageInformation|undefined} value */
proto.model.NodeHardware.prototype.setStorageinformation = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.NodeHardware.prototype.clearStorageinformation = function() {
  this.setStorageinformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.NodeHardware.prototype.hasStorageinformation = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional HostInformation HostInformation = 4;
 * @return {?proto.model.HostInformation}
 */
proto.model.NodeHardware.prototype.getHostinformation = function() {
  return /** @type{?proto.model.HostInformation} */ (
    jspb.Message.getWrapperField(this, proto.model.HostInformation, 4));
};


/** @param {?proto.model.HostInformation|undefined} value */
proto.model.NodeHardware.prototype.setHostinformation = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.model.NodeHardware.prototype.clearHostinformation = function() {
  this.setHostinformation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.model.NodeHardware.prototype.hasHostinformation = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.CPUInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.model.CPUInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.CPUInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.CPUInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    family: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cpuindex: jspb.Message.getFieldWithDefault(msg, 2, 0),
    model: jspb.Message.getFieldWithDefault(msg, 3, ""),
    modelname: jspb.Message.getFieldWithDefault(msg, 4, ""),
    vendorid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    mhz: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    cachesize: jspb.Message.getFieldWithDefault(msg, 7, 0),
    usedpercent: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    coreid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    cores: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.CPUInformation}
 */
proto.model.CPUInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.CPUInformation;
  return proto.model.CPUInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.CPUInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.CPUInformation}
 */
proto.model.CPUInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFamily(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCpuindex(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setModelname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setVendorid(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setMhz(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCachesize(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUsedpercent(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setCoreid(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCores(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.CPUInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.CPUInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.CPUInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.CPUInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFamily();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCpuindex();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getModelname();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getVendorid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getMhz();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getCachesize();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getUsedpercent();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getCoreid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getCores();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional string Family = 1;
 * @return {string}
 */
proto.model.CPUInformation.prototype.getFamily = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.CPUInformation.prototype.setFamily = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 CPUIndex = 2;
 * @return {number}
 */
proto.model.CPUInformation.prototype.getCpuindex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.CPUInformation.prototype.setCpuindex = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string Model = 3;
 * @return {string}
 */
proto.model.CPUInformation.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.CPUInformation.prototype.setModel = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string ModelName = 4;
 * @return {string}
 */
proto.model.CPUInformation.prototype.getModelname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.CPUInformation.prototype.setModelname = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string VendorId = 5;
 * @return {string}
 */
proto.model.CPUInformation.prototype.getVendorid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.CPUInformation.prototype.setVendorid = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double Mhz = 6;
 * @return {number}
 */
proto.model.CPUInformation.prototype.getMhz = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.model.CPUInformation.prototype.setMhz = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int32 CacheSize = 7;
 * @return {number}
 */
proto.model.CPUInformation.prototype.getCachesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.model.CPUInformation.prototype.setCachesize = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional double UsedPercent = 8;
 * @return {number}
 */
proto.model.CPUInformation.prototype.getUsedpercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.model.CPUInformation.prototype.setUsedpercent = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional string CoreID = 9;
 * @return {string}
 */
proto.model.CPUInformation.prototype.getCoreid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/** @param {string} value */
proto.model.CPUInformation.prototype.setCoreid = function(value) {
  jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 Cores = 10;
 * @return {number}
 */
proto.model.CPUInformation.prototype.getCores = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/** @param {number} value */
proto.model.CPUInformation.prototype.setCores = function(value) {
  jspb.Message.setProto3IntField(this, 10, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.HostInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.model.HostInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.HostInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.HostInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    uptime: jspb.Message.getFieldWithDefault(msg, 1, 0),
    os: jspb.Message.getFieldWithDefault(msg, 2, ""),
    platform: jspb.Message.getFieldWithDefault(msg, 3, ""),
    platformfamily: jspb.Message.getFieldWithDefault(msg, 4, ""),
    platformversion: jspb.Message.getFieldWithDefault(msg, 5, ""),
    numberofrunningprocess: jspb.Message.getFieldWithDefault(msg, 6, 0),
    hostid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    hostname: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.HostInformation}
 */
proto.model.HostInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.HostInformation;
  return proto.model.HostInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.HostInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.HostInformation}
 */
proto.model.HostInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUptime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatform(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatformfamily(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setPlatformversion(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setNumberofrunningprocess(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setHostname(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.HostInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.HostInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.HostInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.HostInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUptime();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getOs();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getPlatform();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getPlatformfamily();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPlatformversion();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getNumberofrunningprocess();
  if (f !== 0) {
    writer.writeUint64(
      6,
      f
    );
  }
  f = message.getHostid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getHostname();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional uint64 Uptime = 1;
 * @return {number}
 */
proto.model.HostInformation.prototype.getUptime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.HostInformation.prototype.setUptime = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional string OS = 2;
 * @return {string}
 */
proto.model.HostInformation.prototype.getOs = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.model.HostInformation.prototype.setOs = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string Platform = 3;
 * @return {string}
 */
proto.model.HostInformation.prototype.getPlatform = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.model.HostInformation.prototype.setPlatform = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string PlatformFamily = 4;
 * @return {string}
 */
proto.model.HostInformation.prototype.getPlatformfamily = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.model.HostInformation.prototype.setPlatformfamily = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string PlatformVersion = 5;
 * @return {string}
 */
proto.model.HostInformation.prototype.getPlatformversion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.model.HostInformation.prototype.setPlatformversion = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional uint64 NumberOfRunningProcess = 6;
 * @return {number}
 */
proto.model.HostInformation.prototype.getNumberofrunningprocess = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.model.HostInformation.prototype.setNumberofrunningprocess = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional string HostID = 7;
 * @return {string}
 */
proto.model.HostInformation.prototype.getHostid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.model.HostInformation.prototype.setHostid = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string HostName = 8;
 * @return {string}
 */
proto.model.HostInformation.prototype.getHostname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/** @param {string} value */
proto.model.HostInformation.prototype.setHostname = function(value) {
  jspb.Message.setProto3StringField(this, 8, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.MemoryInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.model.MemoryInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.MemoryInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MemoryInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    total: jspb.Message.getFieldWithDefault(msg, 1, 0),
    free: jspb.Message.getFieldWithDefault(msg, 2, 0),
    available: jspb.Message.getFieldWithDefault(msg, 3, 0),
    used: jspb.Message.getFieldWithDefault(msg, 4, 0),
    usedpercent: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.MemoryInformation}
 */
proto.model.MemoryInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.MemoryInformation;
  return proto.model.MemoryInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.MemoryInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.MemoryInformation}
 */
proto.model.MemoryInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFree(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setAvailable(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUsedpercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.MemoryInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.MemoryInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.MemoryInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.MemoryInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      1,
      f
    );
  }
  f = message.getFree();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getAvailable();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getUsed();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getUsedpercent();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional uint64 Total = 1;
 * @return {number}
 */
proto.model.MemoryInformation.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.model.MemoryInformation.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint64 Free = 2;
 * @return {number}
 */
proto.model.MemoryInformation.prototype.getFree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.MemoryInformation.prototype.setFree = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 Available = 3;
 * @return {number}
 */
proto.model.MemoryInformation.prototype.getAvailable = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.model.MemoryInformation.prototype.setAvailable = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 Used = 4;
 * @return {number}
 */
proto.model.MemoryInformation.prototype.getUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.model.MemoryInformation.prototype.setUsed = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double UsedPercent = 5;
 * @return {number}
 */
proto.model.MemoryInformation.prototype.getUsedpercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.model.MemoryInformation.prototype.setUsedpercent = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.model.StorageInformation.prototype.toObject = function(opt_includeInstance) {
  return proto.model.StorageInformation.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.model.StorageInformation} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.StorageInformation.toObject = function(includeInstance, msg) {
  var f, obj = {
    fstype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    total: jspb.Message.getFieldWithDefault(msg, 2, 0),
    free: jspb.Message.getFieldWithDefault(msg, 3, 0),
    used: jspb.Message.getFieldWithDefault(msg, 4, 0),
    usedpercent: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.model.StorageInformation}
 */
proto.model.StorageInformation.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.model.StorageInformation;
  return proto.model.StorageInformation.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.model.StorageInformation} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.model.StorageInformation}
 */
proto.model.StorageInformation.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFstype(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setTotal(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setFree(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setUsed(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setUsedpercent(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.model.StorageInformation.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.model.StorageInformation.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.model.StorageInformation} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.model.StorageInformation.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFstype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotal();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getFree();
  if (f !== 0) {
    writer.writeUint64(
      3,
      f
    );
  }
  f = message.getUsed();
  if (f !== 0) {
    writer.writeUint64(
      4,
      f
    );
  }
  f = message.getUsedpercent();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
};


/**
 * optional string FsType = 1;
 * @return {string}
 */
proto.model.StorageInformation.prototype.getFstype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.model.StorageInformation.prototype.setFstype = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint64 Total = 2;
 * @return {number}
 */
proto.model.StorageInformation.prototype.getTotal = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.model.StorageInformation.prototype.setTotal = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint64 Free = 3;
 * @return {number}
 */
proto.model.StorageInformation.prototype.getFree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.model.StorageInformation.prototype.setFree = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint64 Used = 4;
 * @return {number}
 */
proto.model.StorageInformation.prototype.getUsed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.model.StorageInformation.prototype.setUsed = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional double UsedPercent = 5;
 * @return {number}
 */
proto.model.StorageInformation.prototype.getUsedpercent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.model.StorageInformation.prototype.setUsedpercent = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


goog.object.extend(exports, proto.model);
