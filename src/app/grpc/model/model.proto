syntax = "proto3";

package model;

// Block represent the block data structure stored in the database
message Block {
    int64 ID = 1;
    string Hash = 2;
    uint32 Height = 3;
    uint32 Timestamp = 4;
    repeated Transaction Transactions =  5;
    bytes Generator = 6;
    int64 TotalAmountNQT = 7;
	int64 TotalFeeNQT = 8;
}

message GetBlocksRequest {
    // number of block to fetch
    int32 BlockSize = 1;
    // fetch block from `n` height
    int32 BlockHeight = 2;
}

message GetBlocksResponse {
    // number of block returned
    int32 BlockSize = 1;
    // blocks height returned from
    int32 BlockHeight = 2;
    // blocks returned
    repeated Block Blocks = 3;
}

message Empty {}

message Peer {
    string Address = 1;
    string AnnouncedAddress = 2;
    int32 Port = 3;
    enum StateEnum {
        NON_CONNECTED = 0;
        CONNECTED = 1;
        DISCONNECTED = 2;
        BLACKLISTED = 3;
    }
    StateEnum State = 4;
    string Version = 5;
}

message GetPeersResponse {
    // peers returned
    repeated Peer Peers = 1;
}

message Transaction {
	int64 ID = 1;
	int64 BlockID = 2;
	uint32 Deadline = 3;
	bytes SenderPublicKey = 4;
	bytes RecipientPublicKey = 5;
	int64 AmountNQT = 6;
	int64 FeeNQT = 7;
	uint32 EcBlockHeight = 8;
	int64 EcBlockID = 9;
	bytes Version = 10;
	uint32 Timestamp = 11;
	bytes Signature = 12;
	bytes Type = 13;
	bytes Subtype = 14;
	uint32 Height = 15;
	string Hash = 16;
}

message GetTransactionsByAccountPublicKeyRequest {
	bytes AccountPublicKey = 1;
}

message GetTransactionsByBlockIDRequest {
	int64 BlockID = 1;
}

message GetTransactionsResponse {
	// GetTrasactions return 
	repeated Transaction Transactions = 1;
}


message AccountBalance {
    int64 ID = 1;
    bytes PublicKey = 2;
    int64 Balance = 3;
    int64 UnconfirmedBalance = 4;
    int32 ForgedBalance = 5;
    int32 Height = 6;
}

message GetAccountBalancesRequest {}

message GetAccountBalancesResponse { 
    repeated AccountBalance AccountBalances = 1;
}

message GetAccountBalanceRequest {
    bytes PublicKey = 1; 
}

message Account {
    int64 ID = 1;
    bytes PublicKey = 2;
    model.AccountBalance AccountBalance = 3;
}

message GetAccountsResponse {
    repeated Account Accounts = 1;
}

message GetAccountByPublicKeyRequest {
    bytes PublicKey = 1;
}
